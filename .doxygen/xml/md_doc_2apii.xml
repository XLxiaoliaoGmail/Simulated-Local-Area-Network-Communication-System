<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="md_doc_2apii" kind="page">
    <compoundname>md_doc_2apii</compoundname>
    <title>Summary</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="md_doc_2apii_1autotoc_md48"/></para>
<para>Members | Descriptions <linebreak/>
 -----------------------------<mdash/>|------------------------------------------<mdash/> <computeroutput>class</computeroutput>`Channel` | <computeroutput>class</computeroutput>`Device` | <computeroutput>class</computeroutput>`Environment` | <computeroutput>class</computeroutput>`Message` | <computeroutput>class</computeroutput>`ProtocolDevice` | <computeroutput>class</computeroutput>`Robot` | <computeroutput>class</computeroutput>`Server` | <computeroutput>class</computeroutput>`SimEvent` | <computeroutput>class</computeroutput>`Station` | <computeroutput>struct</computeroutput>`Position` | <computeroutput>struct</computeroutput>`RobotData` | <computeroutput>struct</computeroutput>`StationData` |</para>
<sect1 id="md_doc_2apii_1autotoc_md49">
<title>class <computeroutput>Channel</computeroutput></title><sect2 id="md_doc_2apii_1autotoc_md50">
<title>Summary</title><para>Members | Descriptions <linebreak/>
 -----------------------------<mdash/>|------------------------------------------<mdash/> <computeroutput>public inline explicit</computeroutput>`Channel`<computeroutput>()</computeroutput> | <computeroutput>public void</computeroutput>`occupy`<computeroutput>(const</computeroutput>`Message`<computeroutput>* msg)</computeroutput> | <computeroutput>public void</computeroutput>`release`<computeroutput>()</computeroutput> | <computeroutput>public inline void</computeroutput>`addListener`<computeroutput>(</computeroutput>`Device`<computeroutput>* d)</computeroutput> | <computeroutput>public inline void</computeroutput>`removeListener`<computeroutput>(</computeroutput>`Device`<computeroutput>* d)</computeroutput> | <computeroutput>public inline bool</computeroutput>`isBusy`<computeroutput>() const</computeroutput> | <computeroutput>public inline bool</computeroutput>`isMixed`<computeroutput>() const</computeroutput> | <computeroutput>public inline const</computeroutput>`Message`<computeroutput>*</computeroutput>`getMsg`<computeroutput>() const</computeroutput> | <computeroutput>public inline std::list&lt;</computeroutput>`Device`<computeroutput>* &gt;</computeroutput>`getListeners`<computeroutput>() const</computeroutput> | <computeroutput>public inline void</computeroutput>`error`<computeroutput>(std::string s)</computeroutput> |</para>
</sect2>
<sect2 id="md_doc_2apii_1autotoc_md51">
<title>Members</title><sect3 id="md_doc_2apii_1autotoc_md52_1s3"><sect4 id="md_doc_2apii_1autotoc_md52">
<title><computeroutput>public inline explicit</computeroutput>`Channel`<computeroutput>()</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md53_1s3"><sect4 id="md_doc_2apii_1autotoc_md53">
<title><computeroutput>public void</computeroutput>`occupy`<computeroutput>(const</computeroutput>`Message`<computeroutput>* msg)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md54_1s3"><sect4 id="md_doc_2apii_1autotoc_md54">
<title><computeroutput>public void</computeroutput>`release`<computeroutput>()</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md55_1s3"><sect4 id="md_doc_2apii_1autotoc_md55">
<title><computeroutput>public inline void</computeroutput>`addListener`<computeroutput>(</computeroutput>`Device`<computeroutput>* d)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md56_1s3"><sect4 id="md_doc_2apii_1autotoc_md56">
<title><computeroutput>public inline void</computeroutput>`removeListener`<computeroutput>(</computeroutput>`Device`<computeroutput>* d)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md57_1s3"><sect4 id="md_doc_2apii_1autotoc_md57">
<title><computeroutput>public inline bool</computeroutput>`isBusy`<computeroutput>() const</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md58_1s3"><sect4 id="md_doc_2apii_1autotoc_md58">
<title><computeroutput>public inline bool</computeroutput>`isMixed`<computeroutput>() const</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md59_1s3"><sect4 id="md_doc_2apii_1autotoc_md59">
<title><computeroutput>public inline const</computeroutput>`Message`<computeroutput>*</computeroutput>`getMsg`<computeroutput>() const</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md60_1s3"><sect4 id="md_doc_2apii_1autotoc_md60">
<title><computeroutput>public inline std::list&lt;</computeroutput>`Device`<computeroutput>* &gt;</computeroutput>`getListeners`<computeroutput>() const</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md61_1s3"><sect4 id="md_doc_2apii_1autotoc_md61">
<title><computeroutput>public inline void</computeroutput>`error`<computeroutput>(std::string s)</computeroutput></title></sect4></sect3>
</sect2>
</sect1>
<sect1 id="md_doc_2apii_1autotoc_md62">
<title>class <computeroutput>Device</computeroutput></title><sect2 id="md_doc_2apii_1autotoc_md63">
<title>Summary</title><para>Members | Descriptions <linebreak/>
 -----------------------------<mdash/>|------------------------------------------<mdash/> <computeroutput>public explicit</computeroutput>`Device`<computeroutput>(</computeroutput>`ADDR_TYPEDEF`<computeroutput>addr,</computeroutput>`Environment`<computeroutput>* en)</computeroutput> | <computeroutput>public virtual void</computeroutput>`recieve`<computeroutput>(const</computeroutput>`Message`<computeroutput>* msg,</computeroutput>`CHANNEL_INDEX_TYPEDEF`<computeroutput>channelIndex)</computeroutput> | <computeroutput>public inline</computeroutput>`ADDR_TYPEDEF``getAddr`<computeroutput>() const</computeroutput> | <computeroutput>public void</computeroutput>`listenTo`<computeroutput>(</computeroutput>`CHANNEL_INDEX_TYPEDEF`<computeroutput>channelIndex)</computeroutput> | <computeroutput>public void</computeroutput>`setBusy`<computeroutput>(bool v)</computeroutput> | <computeroutput>public void</computeroutput>`setWaiting`<computeroutput>(bool v)</computeroutput> | <computeroutput>public inline void</computeroutput>`setOnBusyChanged`<computeroutput>(std::function&lt; void(bool)&gt; callback)</computeroutput> | <computeroutput>public inline void</computeroutput>`setOnWaitingChanged`<computeroutput>(std::function&lt; void(bool)&gt; callback)</computeroutput> | <computeroutput>public inline void</computeroutput>`setLogEnable`<computeroutput>(bool v)</computeroutput> | <computeroutput>public inline void</computeroutput>`error`<computeroutput>(std::string s)</computeroutput> | <computeroutput>protected inline void</computeroutput>`send`<computeroutput>(const std::string &amp; payload,</computeroutput>`CHANNEL_INDEX_TYPEDEF`<computeroutput>channelIndex,</computeroutput>`ADDR_TYPEDEF`<computeroutput>target)</computeroutput> | <computeroutput>protected void</computeroutput>`log`<computeroutput>(const std::string &amp; log)</computeroutput> |</para>
</sect2>
<sect2 id="md_doc_2apii_1autotoc_md64">
<title>Members</title><sect3 id="md_doc_2apii_1autotoc_md65_1s3"><sect4 id="md_doc_2apii_1autotoc_md65">
<title><computeroutput>public explicit</computeroutput>`Device`<computeroutput>(</computeroutput>`ADDR_TYPEDEF`<computeroutput>addr,</computeroutput>`Environment`<computeroutput>* en)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md66_1s3"><sect4 id="md_doc_2apii_1autotoc_md66">
<title><computeroutput>public virtual void</computeroutput>`recieve`<computeroutput>(const</computeroutput>`Message`<computeroutput>* msg,</computeroutput>`CHANNEL_INDEX_TYPEDEF`<computeroutput>channelIndex)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md67_1s3"><sect4 id="md_doc_2apii_1autotoc_md67">
<title><computeroutput>public inline</computeroutput>`ADDR_TYPEDEF``getAddr`<computeroutput>() const</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md68_1s3"><sect4 id="md_doc_2apii_1autotoc_md68">
<title><computeroutput>public void</computeroutput>`listenTo`<computeroutput>(</computeroutput>`CHANNEL_INDEX_TYPEDEF`<computeroutput>channelIndex)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md69_1s3"><sect4 id="md_doc_2apii_1autotoc_md69">
<title><computeroutput>public void</computeroutput>`setBusy`<computeroutput>(bool v)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md70_1s3"><sect4 id="md_doc_2apii_1autotoc_md70">
<title><computeroutput>public void</computeroutput>`setWaiting`<computeroutput>(bool v)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md71_1s3"><sect4 id="md_doc_2apii_1autotoc_md71">
<title><computeroutput>public inline void</computeroutput>`setOnBusyChanged`<computeroutput>(std::function&lt; void(bool)&gt; callback)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md72_1s3"><sect4 id="md_doc_2apii_1autotoc_md72">
<title><computeroutput>public inline void</computeroutput>`setOnWaitingChanged`<computeroutput>(std::function&lt; void(bool)&gt; callback)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md73_1s3"><sect4 id="md_doc_2apii_1autotoc_md73">
<title><computeroutput>public inline void</computeroutput>`setLogEnable`<computeroutput>(bool v)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md74_1s3"><sect4 id="md_doc_2apii_1autotoc_md74">
<title><computeroutput>public inline void</computeroutput>`error`<computeroutput>(std::string s)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md75_1s3"><sect4 id="md_doc_2apii_1autotoc_md75">
<title><computeroutput>protected inline void</computeroutput>`send`<computeroutput>(const std::string &amp; payload,</computeroutput>`CHANNEL_INDEX_TYPEDEF`<computeroutput>channelIndex,</computeroutput>`ADDR_TYPEDEF`<computeroutput>target)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md76_1s3"><sect4 id="md_doc_2apii_1autotoc_md76">
<title><computeroutput>protected void</computeroutput>`log`<computeroutput>(const std::string &amp; log)</computeroutput></title></sect4></sect3>
</sect2>
</sect1>
<sect1 id="md_doc_2apii_1autotoc_md77">
<title>class <computeroutput>Environment</computeroutput></title><sect2 id="md_doc_2apii_1autotoc_md78">
<title>Summary</title><para>Members | Descriptions <linebreak/>
 -----------------------------<mdash/>|------------------------------------------<mdash/> <computeroutput>public inline explicit</computeroutput>`Environment`<computeroutput>()</computeroutput> | <computeroutput>public inline void</computeroutput>`addDevice`<computeroutput>(</computeroutput>`Device`<computeroutput>* d)</computeroutput> | <computeroutput>public void</computeroutput>`broadcast`<computeroutput>(const</computeroutput>`Message`<computeroutput>* msg,</computeroutput>`CHANNEL_INDEX_TYPEDEF`<computeroutput>channelIndex,</computeroutput>`TIME_TYPEDEF`<computeroutput>sendingTime)</computeroutput> | <computeroutput>public void</computeroutput>`update`<computeroutput>()</computeroutput> | <computeroutput>public</computeroutput>`SimEvent`<computeroutput>*</computeroutput>`registerEvent`<computeroutput>(</computeroutput>`TIME_TYPEDEF`<computeroutput>tick,std::function&lt; void()&gt; callback)</computeroutput> | <computeroutput>public inline</computeroutput>`SimEvent`<computeroutput>*</computeroutput>`delayEvent`<computeroutput>(</computeroutput>`TIME_TYPEDEF`<computeroutput>delayTick,std::function&lt; void()&gt; callback)</computeroutput> | <computeroutput>public void</computeroutput>`log`<computeroutput>(const std::string &amp; log)</computeroutput> | <computeroutput>public inline</computeroutput>`TIME_TYPEDEF``getTime`<computeroutput>() const</computeroutput> | <computeroutput>public void</computeroutput>`endAt`<computeroutput>(</computeroutput>`TIME_TYPEDEF`<computeroutput>time)</computeroutput> | <computeroutput>public void</computeroutput>`stopRun`<computeroutput>()</computeroutput> | <computeroutput>public void</computeroutput>`run`<computeroutput>()</computeroutput> | <computeroutput>public inline</computeroutput>`Channel`<computeroutput>*</computeroutput>`getChannels`<computeroutput>()</computeroutput> | <computeroutput>public inline void</computeroutput>`error`<computeroutput>(std::string s)</computeroutput> |</para>
</sect2>
<sect2 id="md_doc_2apii_1autotoc_md79">
<title>Members</title><sect3 id="md_doc_2apii_1autotoc_md80_1s3"><sect4 id="md_doc_2apii_1autotoc_md80">
<title><computeroutput>public inline explicit</computeroutput>`Environment`<computeroutput>()</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md81_1s3"><sect4 id="md_doc_2apii_1autotoc_md81">
<title><computeroutput>public inline void</computeroutput>`addDevice`<computeroutput>(</computeroutput>`Device`<computeroutput>* d)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md82_1s3"><sect4 id="md_doc_2apii_1autotoc_md82">
<title><computeroutput>public void</computeroutput>`broadcast`<computeroutput>(const</computeroutput>`Message`<computeroutput>* msg,</computeroutput>`CHANNEL_INDEX_TYPEDEF`<computeroutput>channelIndex,</computeroutput>`TIME_TYPEDEF`<computeroutput>sendingTime)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md83_1s3"><sect4 id="md_doc_2apii_1autotoc_md83">
<title><computeroutput>public void</computeroutput>`update`<computeroutput>()</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md84_1s3"><sect4 id="md_doc_2apii_1autotoc_md84">
<title><computeroutput>public</computeroutput>`SimEvent`<computeroutput>*</computeroutput>`registerEvent`<computeroutput>(</computeroutput>`TIME_TYPEDEF`<computeroutput>tick,std::function&lt; void()&gt; callback)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md85_1s3"><sect4 id="md_doc_2apii_1autotoc_md85">
<title><computeroutput>public inline</computeroutput>`SimEvent`<computeroutput>*</computeroutput>`delayEvent`<computeroutput>(</computeroutput>`TIME_TYPEDEF`<computeroutput>delayTick,std::function&lt; void()&gt; callback)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md86_1s3"><sect4 id="md_doc_2apii_1autotoc_md86">
<title><computeroutput>public void</computeroutput>`log`<computeroutput>(const std::string &amp; log)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md87_1s3"><sect4 id="md_doc_2apii_1autotoc_md87">
<title><computeroutput>public inline</computeroutput>`TIME_TYPEDEF``getTime`<computeroutput>() const</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md88_1s3"><sect4 id="md_doc_2apii_1autotoc_md88">
<title><computeroutput>public void</computeroutput>`endAt`<computeroutput>(</computeroutput>`TIME_TYPEDEF`<computeroutput>time)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md89_1s3"><sect4 id="md_doc_2apii_1autotoc_md89">
<title><computeroutput>public void</computeroutput>`stopRun`<computeroutput>()</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md90_1s3"><sect4 id="md_doc_2apii_1autotoc_md90">
<title><computeroutput>public void</computeroutput>`run`<computeroutput>()</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md91_1s3"><sect4 id="md_doc_2apii_1autotoc_md91">
<title><computeroutput>public inline</computeroutput>`Channel`<computeroutput>*</computeroutput>`getChannels`<computeroutput>()</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md92_1s3"><sect4 id="md_doc_2apii_1autotoc_md92">
<title><computeroutput>public inline void</computeroutput>`error`<computeroutput>(std::string s)</computeroutput></title></sect4></sect3>
</sect2>
</sect1>
<sect1 id="md_doc_2apii_1autotoc_md93">
<title>class <computeroutput>Message</computeroutput></title><sect2 id="md_doc_2apii_1autotoc_md94">
<title>Summary</title><para>Members | Descriptions <linebreak/>
 -----------------------------<mdash/>|------------------------------------------<mdash/> <computeroutput>public std::string</computeroutput>`sender` | <computeroutput>public std::string</computeroutput>`target` | <computeroutput>public std::string</computeroutput>`payload` | <computeroutput>public inline explicit</computeroutput>`Message`<computeroutput>(</computeroutput>`ADDR_TYPEDEF`<computeroutput>sender,</computeroutput>`ADDR_TYPEDEF`<computeroutput>target,std::string payload)</computeroutput> |</para>
</sect2>
<sect2 id="md_doc_2apii_1autotoc_md95">
<title>Members</title><sect3 id="md_doc_2apii_1autotoc_md96_1s3"><sect4 id="md_doc_2apii_1autotoc_md96">
<title><computeroutput>public std::string</computeroutput>`sender`</title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md97_1s3"><sect4 id="md_doc_2apii_1autotoc_md97">
<title><computeroutput>public std::string</computeroutput>`target`</title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md98_1s3"><sect4 id="md_doc_2apii_1autotoc_md98">
<title><computeroutput>public std::string</computeroutput>`payload`</title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md99_1s3"><sect4 id="md_doc_2apii_1autotoc_md99">
<title><computeroutput>public inline explicit</computeroutput>`Message`<computeroutput>(</computeroutput>`ADDR_TYPEDEF`<computeroutput>sender,</computeroutput>`ADDR_TYPEDEF`<computeroutput>target,std::string payload)</computeroutput></title></sect4></sect3>
</sect2>
</sect1>
<sect1 id="md_doc_2apii_1autotoc_md100">
<title>class <computeroutput>ProtocolDevice</computeroutput></title><para><programlisting><codeline><highlight class="normal">class<sp/>ProtocolDevice</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:<sp/>public<sp/>Device</highlight></codeline>
</programlisting></para>
<sect2 id="md_doc_2apii_1autotoc_md101">
<title>Summary</title><para>Members | Descriptions <linebreak/>
 -----------------------------<mdash/>|------------------------------------------<mdash/> <computeroutput>public inline explicit</computeroutput>`ProtocolDevice`<computeroutput>(</computeroutput>`ADDR_TYPEDEF`<computeroutput>addr,</computeroutput>`Environment`<computeroutput>* en)</computeroutput> | <computeroutput>public inline std::string</computeroutput>`formatKeyStr`<computeroutput>(const std::string &amp; key)</computeroutput> | <computeroutput>public inline std::string</computeroutput>`MsgTypeToHexString`<computeroutput>(</computeroutput>`MsgType`<computeroutput>num)</computeroutput> | <computeroutput>public inline</computeroutput>`MsgType``hexStringToMsgType`<computeroutput>(const std::string &amp; hexStr)</computeroutput> | <computeroutput>public inline void</computeroutput>`send`<computeroutput>(</computeroutput>`MsgType`<computeroutput>type,const std::string payload,</computeroutput>`CHANNEL_INDEX_TYPEDEF`<computeroutput>channelIndex,</computeroutput>`ADDR_TYPEDEF`<computeroutput>target)</computeroutput> | <computeroutput>public inline void</computeroutput>`send`<computeroutput>(</computeroutput>`MsgType`<computeroutput>type,</computeroutput>`CHANNEL_INDEX_TYPEDEF`<computeroutput>channelIndex,</computeroutput>`ADDR_TYPEDEF`<computeroutput>target)</computeroutput> | <computeroutput>public inline void</computeroutput>`send`<computeroutput>(</computeroutput>`MsgType`<computeroutput>type,const std::string payload,</computeroutput>`CHANNEL_INDEX_TYPEDEF`<computeroutput>channelIndex,</computeroutput>`ADDR_TYPEDEF`<computeroutput>target,std::function&lt; void(</computeroutput>`ADDR_TYPEDEF`, const std::string &amp;)<computeroutput>&gt; callback)</computeroutput> | <computeroutput>public inline void</computeroutput>`send`<computeroutput>(</computeroutput>`MsgType`<computeroutput>type,</computeroutput>`CHANNEL_INDEX_TYPEDEF`<computeroutput>channelIndex,</computeroutput>`ADDR_TYPEDEF`<computeroutput>target,std::function&lt; void(</computeroutput>`ADDR_TYPEDEF`, const std::string &amp;)<computeroutput>&gt; callback)</computeroutput> | <computeroutput>public inline void</computeroutput>`on`<computeroutput>(</computeroutput>`MsgType`<computeroutput>type,std::function&lt; void(</computeroutput>`ADDR_TYPEDEF`, const std::string &amp;)<computeroutput>&gt; callback)</computeroutput> | <computeroutput>public inline void</computeroutput>`once`<computeroutput>(</computeroutput>`MsgType`<computeroutput>type,std::function&lt; void(</computeroutput>`ADDR_TYPEDEF`, const std::string &amp;)<computeroutput>&gt; callback)</computeroutput> | <computeroutput>public inline void</computeroutput>`msgHandler`<computeroutput>(</computeroutput>`ADDR_TYPEDEF`<computeroutput>senderAddr,</computeroutput>`MsgType`<computeroutput>type,const std::string &amp; payload)</computeroutput> | <computeroutput>public inline virtual void</computeroutput>`recieve`<computeroutput>(const</computeroutput>`Message`<computeroutput>* msg,</computeroutput>`CHANNEL_INDEX_TYPEDEF`<computeroutput>channelIndex)</computeroutput> | <computeroutput>public inline void</computeroutput>`log`<computeroutput>(const std::string &amp; who,const std::string &amp; log)</computeroutput> |</para>
</sect2>
<sect2 id="md_doc_2apii_1autotoc_md102">
<title>Members</title><sect3 id="md_doc_2apii_1autotoc_md103_1s3"><sect4 id="md_doc_2apii_1autotoc_md103">
<title><computeroutput>public inline explicit</computeroutput>`ProtocolDevice`<computeroutput>(</computeroutput>`ADDR_TYPEDEF`<computeroutput>addr,</computeroutput>`Environment`<computeroutput>* en)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md104_1s3"><sect4 id="md_doc_2apii_1autotoc_md104">
<title><computeroutput>public inline std::string</computeroutput>`formatKeyStr`<computeroutput>(const std::string &amp; key)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md105_1s3"><sect4 id="md_doc_2apii_1autotoc_md105">
<title><computeroutput>public inline std::string</computeroutput>`MsgTypeToHexString`<computeroutput>(</computeroutput>`MsgType`<computeroutput>num)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md106_1s3"><sect4 id="md_doc_2apii_1autotoc_md106">
<title><computeroutput>public inline</computeroutput>`MsgType``hexStringToMsgType`<computeroutput>(const std::string &amp; hexStr)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md107_1s3"><sect4 id="md_doc_2apii_1autotoc_md107">
<title><computeroutput>public inline void</computeroutput>`send`<computeroutput>(</computeroutput>`MsgType`<computeroutput>type,const std::string payload,</computeroutput>`CHANNEL_INDEX_TYPEDEF`<computeroutput>channelIndex,</computeroutput>`ADDR_TYPEDEF`<computeroutput>target)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md108_1s3"><sect4 id="md_doc_2apii_1autotoc_md108">
<title><computeroutput>public inline void</computeroutput>`send`<computeroutput>(</computeroutput>`MsgType`<computeroutput>type,</computeroutput>`CHANNEL_INDEX_TYPEDEF`<computeroutput>channelIndex,</computeroutput>`ADDR_TYPEDEF`<computeroutput>target)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md109_1s3"><sect4 id="md_doc_2apii_1autotoc_md109">
<title><computeroutput>public inline void</computeroutput>`send`<computeroutput>(</computeroutput>`MsgType`<computeroutput>type,const std::string payload,</computeroutput>`CHANNEL_INDEX_TYPEDEF`<computeroutput>channelIndex,</computeroutput>`ADDR_TYPEDEF`<computeroutput>target,std::function&lt; void(</computeroutput>`ADDR_TYPEDEF`, const std::string &amp;)<computeroutput>&gt; callback)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md110_1s3"><sect4 id="md_doc_2apii_1autotoc_md110">
<title><computeroutput>public inline void</computeroutput>`send`<computeroutput>(</computeroutput>`MsgType`<computeroutput>type,</computeroutput>`CHANNEL_INDEX_TYPEDEF`<computeroutput>channelIndex,</computeroutput>`ADDR_TYPEDEF`<computeroutput>target,std::function&lt; void(</computeroutput>`ADDR_TYPEDEF`, const std::string &amp;)<computeroutput>&gt; callback)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md111_1s3"><sect4 id="md_doc_2apii_1autotoc_md111">
<title><computeroutput>public inline void</computeroutput>`on`<computeroutput>(</computeroutput>`MsgType`<computeroutput>type,std::function&lt; void(</computeroutput>`ADDR_TYPEDEF`, const std::string &amp;)<computeroutput>&gt; callback)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md112_1s3"><sect4 id="md_doc_2apii_1autotoc_md112">
<title><computeroutput>public inline void</computeroutput>`once`<computeroutput>(</computeroutput>`MsgType`<computeroutput>type,std::function&lt; void(</computeroutput>`ADDR_TYPEDEF`, const std::string &amp;)<computeroutput>&gt; callback)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md113_1s3"><sect4 id="md_doc_2apii_1autotoc_md113">
<title><computeroutput>public inline void</computeroutput>`msgHandler`<computeroutput>(</computeroutput>`ADDR_TYPEDEF`<computeroutput>senderAddr,</computeroutput>`MsgType`<computeroutput>type,const std::string &amp; payload)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md114_1s3"><sect4 id="md_doc_2apii_1autotoc_md114">
<title><computeroutput>public inline virtual void</computeroutput>`recieve`<computeroutput>(const</computeroutput>`Message`<computeroutput>* msg,</computeroutput>`CHANNEL_INDEX_TYPEDEF`<computeroutput>channelIndex)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md115_1s3"><sect4 id="md_doc_2apii_1autotoc_md115">
<title><computeroutput>public inline void</computeroutput>`log`<computeroutput>(const std::string &amp; who,const std::string &amp; log)</computeroutput></title></sect4></sect3>
</sect2>
</sect1>
<sect1 id="md_doc_2apii_1autotoc_md116">
<title>class <computeroutput>Robot</computeroutput></title><para><programlisting><codeline><highlight class="normal">class<sp/>Robot</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:<sp/>public<sp/>ProtocolDevice</highlight></codeline>
</programlisting></para>
<sect2 id="md_doc_2apii_1autotoc_md117">
<title>Summary</title><para>Members | Descriptions <linebreak/>
 -----------------------------<mdash/>|------------------------------------------<mdash/> <computeroutput>public explicit</computeroutput>`Robot`<computeroutput>(</computeroutput>`ADDR_TYPEDEF`<computeroutput>addr,</computeroutput>`Environment`<computeroutput>* en)</computeroutput> | <computeroutput>public inline void</computeroutput>`listenTo`<computeroutput>(</computeroutput>`CHANNEL_INDEX_TYPEDEF`<computeroutput>channelIndex)</computeroutput> | <computeroutput>public inline void</computeroutput>`log`<computeroutput>(const std::string &amp; log)</computeroutput> | <computeroutput>public inline void</computeroutput>`gotoPosition`<computeroutput>(</computeroutput>`Position`<computeroutput>pos)</computeroutput> | <computeroutput>public inline void</computeroutput>`chagingUp`<computeroutput>()</computeroutput> | <computeroutput>public inline</computeroutput>`POWER_TYPEDEF``getPower`<computeroutput>() const</computeroutput> | <computeroutput>public void</computeroutput>`login`<computeroutput>(std::string loginKey)</computeroutput> | <computeroutput>public void</computeroutput>`needCharge`<computeroutput>()</computeroutput> | <computeroutput>public inline void</computeroutput>`sendToServer`<computeroutput>(</computeroutput>`MsgType`<computeroutput>type,const std::string payload)</computeroutput> | <computeroutput>public inline void</computeroutput>`sendToServer`<computeroutput>(</computeroutput>`MsgType`<computeroutput>type)</computeroutput> | <computeroutput>public inline void</computeroutput>`sendToServer`<computeroutput>(</computeroutput>`MsgType`<computeroutput>type,const std::string payload,std::function&lt; void(</computeroutput>`ADDR_TYPEDEF`, const std::string &amp;)<computeroutput>&gt; callback)</computeroutput> | <computeroutput>public inline void</computeroutput>`sendToServer`<computeroutput>(</computeroutput>`MsgType`<computeroutput>type,std::function&lt; void(</computeroutput>`ADDR_TYPEDEF`, const std::string &amp;)<computeroutput>&gt; callback)</computeroutput> | <computeroutput>public void</computeroutput>`sendHandshakeToStation`<computeroutput>(std::string handShakey,</computeroutput>`ADDR_TYPEDEF`<computeroutput>stationAddr,</computeroutput>`CHANNEL_INDEX_TYPEDEF`<computeroutput>channelIndex)</computeroutput> | <computeroutput>public inline void</computeroutput>`keepAliveWhenCharging`<computeroutput>()</computeroutput> | <computeroutput>public inline void</computeroutput>`sendPowerFinish`<computeroutput>(</computeroutput>`ADDR_TYPEDEF`<computeroutput>stationAddr)</computeroutput> |</para>
</sect2>
<sect2 id="md_doc_2apii_1autotoc_md118">
<title>Members</title><sect3 id="md_doc_2apii_1autotoc_md119_1s3"><sect4 id="md_doc_2apii_1autotoc_md119">
<title><computeroutput>public explicit</computeroutput>`Robot`<computeroutput>(</computeroutput>`ADDR_TYPEDEF`<computeroutput>addr,</computeroutput>`Environment`<computeroutput>* en)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md120_1s3"><sect4 id="md_doc_2apii_1autotoc_md120">
<title><computeroutput>public inline void</computeroutput>`listenTo`<computeroutput>(</computeroutput>`CHANNEL_INDEX_TYPEDEF`<computeroutput>channelIndex)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md121_1s3"><sect4 id="md_doc_2apii_1autotoc_md121">
<title><computeroutput>public inline void</computeroutput>`log`<computeroutput>(const std::string &amp; log)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md122_1s3"><sect4 id="md_doc_2apii_1autotoc_md122">
<title><computeroutput>public inline void</computeroutput>`gotoPosition`<computeroutput>(</computeroutput>`Position`<computeroutput>pos)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md123_1s3"><sect4 id="md_doc_2apii_1autotoc_md123">
<title><computeroutput>public inline void</computeroutput>`chagingUp`<computeroutput>()</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md124_1s3"><sect4 id="md_doc_2apii_1autotoc_md124">
<title><computeroutput>public inline</computeroutput>`POWER_TYPEDEF``getPower`<computeroutput>() const</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md125_1s3"><sect4 id="md_doc_2apii_1autotoc_md125">
<title><computeroutput>public void</computeroutput>`login`<computeroutput>(std::string loginKey)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md126_1s3"><sect4 id="md_doc_2apii_1autotoc_md126">
<title><computeroutput>public void</computeroutput>`needCharge`<computeroutput>()</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md127_1s3"><sect4 id="md_doc_2apii_1autotoc_md127">
<title><computeroutput>public inline void</computeroutput>`sendToServer`<computeroutput>(</computeroutput>`MsgType`<computeroutput>type,const std::string payload)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md128_1s3"><sect4 id="md_doc_2apii_1autotoc_md128">
<title><computeroutput>public inline void</computeroutput>`sendToServer`<computeroutput>(</computeroutput>`MsgType`<computeroutput>type)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md129_1s3"><sect4 id="md_doc_2apii_1autotoc_md129">
<title><computeroutput>public inline void</computeroutput>`sendToServer`<computeroutput>(</computeroutput>`MsgType`<computeroutput>type,const std::string payload,std::function&lt; void(</computeroutput>`ADDR_TYPEDEF`, const std::string &amp;)<computeroutput>&gt; callback)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md130_1s3"><sect4 id="md_doc_2apii_1autotoc_md130">
<title><computeroutput>public inline void</computeroutput>`sendToServer`<computeroutput>(</computeroutput>`MsgType`<computeroutput>type,std::function&lt; void(</computeroutput>`ADDR_TYPEDEF`, const std::string &amp;)<computeroutput>&gt; callback)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md131_1s3"><sect4 id="md_doc_2apii_1autotoc_md131">
<title><computeroutput>public void</computeroutput>`sendHandshakeToStation`<computeroutput>(std::string handShakey,</computeroutput>`ADDR_TYPEDEF`<computeroutput>stationAddr,</computeroutput>`CHANNEL_INDEX_TYPEDEF`<computeroutput>channelIndex)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md132_1s3"><sect4 id="md_doc_2apii_1autotoc_md132">
<title><computeroutput>public inline void</computeroutput>`keepAliveWhenCharging`<computeroutput>()</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md133_1s3"><sect4 id="md_doc_2apii_1autotoc_md133">
<title><computeroutput>public inline void</computeroutput>`sendPowerFinish`<computeroutput>(</computeroutput>`ADDR_TYPEDEF`<computeroutput>stationAddr)</computeroutput></title></sect4></sect3>
</sect2>
</sect1>
<sect1 id="md_doc_2apii_1autotoc_md134">
<title>class <computeroutput>Server</computeroutput></title><para><programlisting><codeline><highlight class="normal">class<sp/>Server</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:<sp/>public<sp/>ProtocolDevice</highlight></codeline>
</programlisting></para>
<sect2 id="md_doc_2apii_1autotoc_md135">
<title>Summary</title><para>Members | Descriptions <linebreak/>
 -----------------------------<mdash/>|------------------------------------------<mdash/> <computeroutput>public explicit</computeroutput>`Server`<computeroutput>(</computeroutput>`ADDR_TYPEDEF`<computeroutput>addr,</computeroutput>`Environment`<computeroutput>* en)</computeroutput> | <computeroutput>public inline bool</computeroutput>`isRobot`<computeroutput>(</computeroutput>`ADDR_TYPEDEF`<computeroutput>addr)</computeroutput> | <computeroutput>public inline bool</computeroutput>`isStation`<computeroutput>(</computeroutput>`ADDR_TYPEDEF`<computeroutput>addr)</computeroutput> | <computeroutput>public</computeroutput>`StationData`<computeroutput>*</computeroutput>`getFreeStation`<computeroutput>()</computeroutput> | <computeroutput>public inline void</computeroutput>`setStationStatus`<computeroutput>(</computeroutput>`ADDR_TYPEDEF`<computeroutput>addr,bool free)</computeroutput> | <computeroutput>public inline void</computeroutput>`setRobotLoginKey`<computeroutput>(const std::string &amp; key)</computeroutput> | <computeroutput>public inline void</computeroutput>`setStationLoginKey`<computeroutput>(const std::string &amp; key)</computeroutput> | <computeroutput>public inline void</computeroutput>`addRobotAddr`<computeroutput>(</computeroutput>`ADDR_TYPEDEF`<computeroutput>addr)</computeroutput> | <computeroutput>public inline void</computeroutput>`addStationAddr`<computeroutput>(</computeroutput>`ADDR_TYPEDEF`<computeroutput>addr)</computeroutput> | <computeroutput>public inline void</computeroutput>`listenTo`<computeroutput>(</computeroutput>`CHANNEL_INDEX_TYPEDEF`<computeroutput>channelIndex)</computeroutput> | <computeroutput>public inline void</computeroutput>`log`<computeroutput>(const std::string &amp; log)</computeroutput> |</para>
</sect2>
<sect2 id="md_doc_2apii_1autotoc_md136">
<title>Members</title><sect3 id="md_doc_2apii_1autotoc_md137_1s3"><sect4 id="md_doc_2apii_1autotoc_md137">
<title><computeroutput>public explicit</computeroutput>`Server`<computeroutput>(</computeroutput>`ADDR_TYPEDEF`<computeroutput>addr,</computeroutput>`Environment`<computeroutput>* en)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md138_1s3"><sect4 id="md_doc_2apii_1autotoc_md138">
<title><computeroutput>public inline bool</computeroutput>`isRobot`<computeroutput>(</computeroutput>`ADDR_TYPEDEF`<computeroutput>addr)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md139_1s3"><sect4 id="md_doc_2apii_1autotoc_md139">
<title><computeroutput>public inline bool</computeroutput>`isStation`<computeroutput>(</computeroutput>`ADDR_TYPEDEF`<computeroutput>addr)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md140_1s3"><sect4 id="md_doc_2apii_1autotoc_md140">
<title><computeroutput>public</computeroutput>`StationData`<computeroutput>*</computeroutput>`getFreeStation`<computeroutput>()</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md141_1s3"><sect4 id="md_doc_2apii_1autotoc_md141">
<title><computeroutput>public inline void</computeroutput>`setStationStatus`<computeroutput>(</computeroutput>`ADDR_TYPEDEF`<computeroutput>addr,bool free)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md142_1s3"><sect4 id="md_doc_2apii_1autotoc_md142">
<title><computeroutput>public inline void</computeroutput>`setRobotLoginKey`<computeroutput>(const std::string &amp; key)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md143_1s3"><sect4 id="md_doc_2apii_1autotoc_md143">
<title><computeroutput>public inline void</computeroutput>`setStationLoginKey`<computeroutput>(const std::string &amp; key)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md144_1s3"><sect4 id="md_doc_2apii_1autotoc_md144">
<title><computeroutput>public inline void</computeroutput>`addRobotAddr`<computeroutput>(</computeroutput>`ADDR_TYPEDEF`<computeroutput>addr)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md145_1s3"><sect4 id="md_doc_2apii_1autotoc_md145">
<title><computeroutput>public inline void</computeroutput>`addStationAddr`<computeroutput>(</computeroutput>`ADDR_TYPEDEF`<computeroutput>addr)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md146_1s3"><sect4 id="md_doc_2apii_1autotoc_md146">
<title><computeroutput>public inline void</computeroutput>`listenTo`<computeroutput>(</computeroutput>`CHANNEL_INDEX_TYPEDEF`<computeroutput>channelIndex)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md147_1s3"><sect4 id="md_doc_2apii_1autotoc_md147">
<title><computeroutput>public inline void</computeroutput>`log`<computeroutput>(const std::string &amp; log)</computeroutput></title></sect4></sect3>
</sect2>
</sect1>
<sect1 id="md_doc_2apii_1autotoc_md148">
<title>class <computeroutput>SimEvent</computeroutput></title><sect2 id="md_doc_2apii_1autotoc_md149">
<title>Summary</title><para>Members | Descriptions <linebreak/>
 -----------------------------<mdash/>|------------------------------------------<mdash/> <computeroutput>public explicit</computeroutput>`SimEvent`<computeroutput>(</computeroutput>`Environment`<computeroutput>* en,</computeroutput>`TIME_TYPEDEF`<computeroutput>emitTick,std::function&lt; void()&gt; callback)</computeroutput> | <computeroutput>public</computeroutput>`SimEvent`<computeroutput>*</computeroutput>`then`<computeroutput>(</computeroutput>`TIME_TYPEDEF`<computeroutput>delayTime,std::function&lt; void()&gt; callback)</computeroutput> | <computeroutput>public void</computeroutput>`emit`<computeroutput>()</computeroutput> | <computeroutput>public inline</computeroutput>`TIME_TYPEDEF``getEmitTick`<computeroutput>() const</computeroutput> |</para>
</sect2>
<sect2 id="md_doc_2apii_1autotoc_md150">
<title>Members</title><sect3 id="md_doc_2apii_1autotoc_md151_1s3"><sect4 id="md_doc_2apii_1autotoc_md151">
<title><computeroutput>public explicit</computeroutput>`SimEvent`<computeroutput>(</computeroutput>`Environment`<computeroutput>* en,</computeroutput>`TIME_TYPEDEF`<computeroutput>emitTick,std::function&lt; void()&gt; callback)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md152_1s3"><sect4 id="md_doc_2apii_1autotoc_md152">
<title><computeroutput>public</computeroutput>`SimEvent`<computeroutput>*</computeroutput>`then`<computeroutput>(</computeroutput>`TIME_TYPEDEF`<computeroutput>delayTime,std::function&lt; void()&gt; callback)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md153_1s3"><sect4 id="md_doc_2apii_1autotoc_md153">
<title><computeroutput>public void</computeroutput>`emit`<computeroutput>()</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md154_1s3"><sect4 id="md_doc_2apii_1autotoc_md154">
<title><computeroutput>public inline</computeroutput>`TIME_TYPEDEF``getEmitTick`<computeroutput>() const</computeroutput></title></sect4></sect3>
</sect2>
</sect1>
<sect1 id="md_doc_2apii_1autotoc_md155">
<title>class <computeroutput>Station</computeroutput></title><para><programlisting><codeline><highlight class="normal">class<sp/>Station</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:<sp/>public<sp/>ProtocolDevice</highlight></codeline>
</programlisting></para>
<sect2 id="md_doc_2apii_1autotoc_md156">
<title>Summary</title><para>Members | Descriptions <linebreak/>
 -----------------------------<mdash/>|------------------------------------------<mdash/> <computeroutput>public explicit</computeroutput>`Station`<computeroutput>(</computeroutput>`ADDR_TYPEDEF`<computeroutput>addr,</computeroutput>`Environment`<computeroutput>* en,</computeroutput>`POSITION_UNIT_TYPEDEF`<computeroutput>x,</computeroutput>`POSITION_UNIT_TYPEDEF`<computeroutput>y)</computeroutput> | <computeroutput>public inline void</computeroutput>`log`<computeroutput>(const std::string &amp; log)</computeroutput> | <computeroutput>public inline void</computeroutput>`sendToServer`<computeroutput>(</computeroutput>`MsgType`<computeroutput>type,const std::string payload)</computeroutput> | <computeroutput>public inline void</computeroutput>`sendToServer`<computeroutput>(</computeroutput>`MsgType`<computeroutput>type)</computeroutput> | <computeroutput>public inline void</computeroutput>`sendToServer`<computeroutput>(</computeroutput>`MsgType`<computeroutput>type,const std::string payload,std::function&lt; void(</computeroutput>`ADDR_TYPEDEF`, const std::string &amp;)<computeroutput>&gt; callback)</computeroutput> | <computeroutput>public inline void</computeroutput>`sendToServer`<computeroutput>(</computeroutput>`MsgType`<computeroutput>type,std::function&lt; void(</computeroutput>`ADDR_TYPEDEF`, const std::string &amp;)<computeroutput>&gt; callback)</computeroutput> | <computeroutput>public void</computeroutput>`login`<computeroutput>(std::string loginKey)</computeroutput> | <computeroutput>public void</computeroutput>`updateFreeToServer`<computeroutput>(bool free)</computeroutput> | <computeroutput>public void</computeroutput>`updatePositionToServer`<computeroutput>()</computeroutput> | <computeroutput>public inline</computeroutput>`POSITION_UNIT_TYPEDEF``getX`<computeroutput>()</computeroutput> | <computeroutput>public inline</computeroutput>`POSITION_UNIT_TYPEDEF``getY`<computeroutput>()</computeroutput> | <computeroutput>public inline void</computeroutput>`setOccupied`<computeroutput>(bool v)</computeroutput> |</para>
</sect2>
<sect2 id="md_doc_2apii_1autotoc_md157">
<title>Members</title><sect3 id="md_doc_2apii_1autotoc_md158_1s3"><sect4 id="md_doc_2apii_1autotoc_md158">
<title><computeroutput>public explicit</computeroutput>`Station`<computeroutput>(</computeroutput>`ADDR_TYPEDEF`<computeroutput>addr,</computeroutput>`Environment`<computeroutput>* en,</computeroutput>`POSITION_UNIT_TYPEDEF`<computeroutput>x,</computeroutput>`POSITION_UNIT_TYPEDEF`<computeroutput>y)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md159_1s3"><sect4 id="md_doc_2apii_1autotoc_md159">
<title><computeroutput>public inline void</computeroutput>`log`<computeroutput>(const std::string &amp; log)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md160_1s3"><sect4 id="md_doc_2apii_1autotoc_md160">
<title><computeroutput>public inline void</computeroutput>`sendToServer`<computeroutput>(</computeroutput>`MsgType`<computeroutput>type,const std::string payload)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md161_1s3"><sect4 id="md_doc_2apii_1autotoc_md161">
<title><computeroutput>public inline void</computeroutput>`sendToServer`<computeroutput>(</computeroutput>`MsgType`<computeroutput>type)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md162_1s3"><sect4 id="md_doc_2apii_1autotoc_md162">
<title><computeroutput>public inline void</computeroutput>`sendToServer`<computeroutput>(</computeroutput>`MsgType`<computeroutput>type,const std::string payload,std::function&lt; void(</computeroutput>`ADDR_TYPEDEF`, const std::string &amp;)<computeroutput>&gt; callback)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md163_1s3"><sect4 id="md_doc_2apii_1autotoc_md163">
<title><computeroutput>public inline void</computeroutput>`sendToServer`<computeroutput>(</computeroutput>`MsgType`<computeroutput>type,std::function&lt; void(</computeroutput>`ADDR_TYPEDEF`, const std::string &amp;)<computeroutput>&gt; callback)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md164_1s3"><sect4 id="md_doc_2apii_1autotoc_md164">
<title><computeroutput>public void</computeroutput>`login`<computeroutput>(std::string loginKey)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md165_1s3"><sect4 id="md_doc_2apii_1autotoc_md165">
<title><computeroutput>public void</computeroutput>`updateFreeToServer`<computeroutput>(bool free)</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md166_1s3"><sect4 id="md_doc_2apii_1autotoc_md166">
<title><computeroutput>public void</computeroutput>`updatePositionToServer`<computeroutput>()</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md167_1s3"><sect4 id="md_doc_2apii_1autotoc_md167">
<title><computeroutput>public inline</computeroutput>`POSITION_UNIT_TYPEDEF``getX`<computeroutput>()</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md168_1s3"><sect4 id="md_doc_2apii_1autotoc_md168">
<title><computeroutput>public inline</computeroutput>`POSITION_UNIT_TYPEDEF``getY`<computeroutput>()</computeroutput></title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md169_1s3"><sect4 id="md_doc_2apii_1autotoc_md169">
<title><computeroutput>public inline void</computeroutput>`setOccupied`<computeroutput>(bool v)</computeroutput></title></sect4></sect3>
</sect2>
</sect1>
<sect1 id="md_doc_2apii_1autotoc_md170">
<title>struct <computeroutput>Position</computeroutput></title><sect2 id="md_doc_2apii_1autotoc_md171">
<title>Summary</title><para>Members | Descriptions <linebreak/>
 -----------------------------<mdash/>|------------------------------------------<mdash/> <computeroutput>public</computeroutput>`POSITION_UNIT_TYPEDEF``x` | <computeroutput>public</computeroutput>`POSITION_UNIT_TYPEDEF``y` |</para>
</sect2>
<sect2 id="md_doc_2apii_1autotoc_md172">
<title>Members</title><sect3 id="md_doc_2apii_1autotoc_md173_1s3"><sect4 id="md_doc_2apii_1autotoc_md173">
<title><computeroutput>public</computeroutput>`POSITION_UNIT_TYPEDEF``x`</title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md174_1s3"><sect4 id="md_doc_2apii_1autotoc_md174">
<title><computeroutput>public</computeroutput>`POSITION_UNIT_TYPEDEF``y`</title></sect4></sect3>
</sect2>
</sect1>
<sect1 id="md_doc_2apii_1autotoc_md175">
<title>struct <computeroutput>RobotData</computeroutput></title><sect2 id="md_doc_2apii_1autotoc_md176">
<title>Summary</title><para>Members | Descriptions <linebreak/>
 -----------------------------<mdash/>|------------------------------------------<mdash/> <computeroutput>public inline explicit</computeroutput>`RobotData`<computeroutput>()</computeroutput> |</para>
</sect2>
<sect2 id="md_doc_2apii_1autotoc_md177">
<title>Members</title><sect3 id="md_doc_2apii_1autotoc_md178_1s3"><sect4 id="md_doc_2apii_1autotoc_md178">
<title><computeroutput>public inline explicit</computeroutput>`RobotData`<computeroutput>()</computeroutput></title></sect4></sect3>
</sect2>
</sect1>
<sect1 id="md_doc_2apii_1autotoc_md179">
<title>struct <computeroutput>StationData</computeroutput></title><sect2 id="md_doc_2apii_1autotoc_md180">
<title>Summary</title><para>Members | Descriptions <linebreak/>
 -----------------------------<mdash/>|------------------------------------------<mdash/> <computeroutput>public</computeroutput>`ADDR_TYPEDEF``addr` | <computeroutput>public bool</computeroutput>`free` | <computeroutput>public</computeroutput>`POSITION_UNIT_TYPEDEF``x` | <computeroutput>public</computeroutput>`POSITION_UNIT_TYPEDEF``y` | <computeroutput>public inline explicit</computeroutput>`StationData`<computeroutput>(</computeroutput>`ADDR_TYPEDEF`<computeroutput>addr)</computeroutput> |</para>
</sect2>
<sect2 id="md_doc_2apii_1autotoc_md181">
<title>Members</title><sect3 id="md_doc_2apii_1autotoc_md182_1s3"><sect4 id="md_doc_2apii_1autotoc_md182">
<title><computeroutput>public</computeroutput>`ADDR_TYPEDEF``addr`</title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md183_1s3"><sect4 id="md_doc_2apii_1autotoc_md183">
<title><computeroutput>public bool</computeroutput>`free`</title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md184_1s3"><sect4 id="md_doc_2apii_1autotoc_md184">
<title><computeroutput>public</computeroutput>`POSITION_UNIT_TYPEDEF``x`</title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md185_1s3"><sect4 id="md_doc_2apii_1autotoc_md185">
<title><computeroutput>public</computeroutput>`POSITION_UNIT_TYPEDEF``y`</title></sect4></sect3>
<sect3 id="md_doc_2apii_1autotoc_md186_1s3"><sect4 id="md_doc_2apii_1autotoc_md186">
<title><computeroutput>public inline explicit</computeroutput>`StationData`<computeroutput>(</computeroutput>`ADDR_TYPEDEF`<computeroutput>addr)</computeroutput></title><para>Generated by <ulink url="https://sourcey.com/moxygen">Moxygen</ulink> </para>
</sect4></sect3>
</sect2>
</sect1>
    </detaileddescription>
    <location file="doc/apii.md"/>
  </compounddef>
</doxygen>
