<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="md_doc_2_a_p_i" kind="page">
    <compoundname>md_doc_2_a_p_i</compoundname>
    <title>API</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="md_doc_2_a_p_i_1autotoc_md0"/></para>
<para>This project simulates a local network communication system, divided into two main layers: the <bold>Physical Simulation Layer</bold> and the <bold>Protocol Implementation Layer</bold>.</para>
<sect1 id="md_doc_2_a_p_i_1autotoc_md1">
<title>Environment Class</title><para>The <computeroutput><ref refid="class_environment" kindref="compound">Environment</ref></computeroutput> class simulates the physical environment for a local network communication system. It manages devices, channels, and simulation events while keeping track of the simulation time.</para>
<sect2 id="md_doc_2_a_p_i_1autotoc_md2">
<title>Attributes</title><para><itemizedlist>
<listitem><para><bold><computeroutput>running</computeroutput></bold> (<computeroutput>bool</computeroutput>): Indicates whether the simulation is currently running. Default is <computeroutput>false</computeroutput>.</para>
</listitem><listitem><para><bold><computeroutput>devices</computeroutput></bold> (<computeroutput>std::vector&lt;Device*&gt;</computeroutput>): A collection of pointers to <computeroutput><ref refid="class_device" kindref="compound">Device</ref></computeroutput> objects participating in the simulation.</para>
</listitem><listitem><para><bold><computeroutput>time</computeroutput></bold> (<computeroutput>TIME_TYPEDEF</computeroutput>): Tracks the current simulation time in ticks.</para>
</listitem><listitem><para><bold><computeroutput>eventsAtCertainTick</computeroutput></bold> (<computeroutput>std::unordered_map&lt;TIME_TYPEDEF, std::vector&lt;SimEvent*&gt;&gt;</computeroutput>): Maps specific simulation ticks to lists of scheduled events (<computeroutput><ref refid="class_sim_event" kindref="compound">SimEvent</ref></computeroutput>).</para>
</listitem><listitem><para><bold><computeroutput>channels</computeroutput></bold> (<computeroutput><ref refid="class_channel" kindref="compound">Channel</ref>[CHANNEL_COUNTS]</computeroutput>): An array of <computeroutput><ref refid="class_channel" kindref="compound">Channel</ref></computeroutput> objects, representing communication channels available in the environment.</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="md_doc_2_a_p_i_1autotoc_md3">
<title>Methods</title><sect3 id="md_doc_2_a_p_i_1autotoc_md4">
<title>Constructor</title><para><itemizedlist>
<listitem><para><bold><computeroutput>explicit <ref refid="class_environment" kindref="compound">Environment()</ref></computeroutput></bold><itemizedlist>
<listitem><para>Initializes an <computeroutput><ref refid="class_environment" kindref="compound">Environment</ref></computeroutput> object with <computeroutput>running</computeroutput> set to <computeroutput>false</computeroutput> and <computeroutput>time</computeroutput> set to <computeroutput>0</computeroutput>.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect3>
<sect3 id="md_doc_2_a_p_i_1autotoc_md5">
<title>Public Methods</title><para><itemizedlist>
<listitem><para><bold><computeroutput>void addDevice(Device* d)</computeroutput></bold><itemizedlist>
<listitem><para>Adds a device to the simulation environment.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>d</computeroutput>: A pointer to the <computeroutput><ref refid="class_device" kindref="compound">Device</ref></computeroutput> object to be added.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void broadcast(const Message* msg, CHANNEL_INDEX_TYPEDEF channelIndex, TIME_TYPEDEF sendingTime)</computeroutput></bold><itemizedlist>
<listitem><para>Broadcasts a message to all devices listening to the specified channel.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>msg</computeroutput>: A pointer to the <computeroutput><ref refid="class_message" kindref="compound">Message</ref></computeroutput> to be broadcasted.</para>
</listitem><listitem><para><computeroutput>channelIndex</computeroutput>: The index of the channel through which the message is broadcasted.</para>
</listitem><listitem><para><computeroutput>sendingTime</computeroutput>: The time at which the message is sent.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void update()</computeroutput></bold><itemizedlist>
<listitem><para>Advances the simulation by processing events and updating the environment&apos;s state.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>SimEvent* registerEvent(TIME_TYPEDEF tick, std::function&lt;void()&gt; callback)</computeroutput></bold><itemizedlist>
<listitem><para>Registers a new event to be executed at a specific simulation tick.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>tick</computeroutput>: The simulation time (in ticks) when the event will occur.</para>
</listitem><listitem><para><computeroutput>callback</computeroutput>: A function to be executed when the event triggers.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>Returns:</bold> A pointer to the registered <computeroutput><ref refid="class_sim_event" kindref="compound">SimEvent</ref></computeroutput>.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>SimEvent* delayEvent(TIME_TYPEDEF delayTick, std::function&lt;void()&gt; callback)</computeroutput></bold><itemizedlist>
<listitem><para>Schedules an event to occur after a specified delay from the current simulation time.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>delayTick</computeroutput>: The delay (in ticks) from the current simulation time.</para>
</listitem><listitem><para><computeroutput>callback</computeroutput>: A function to be executed when the event triggers.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>Returns:</bold> A pointer to the scheduled <computeroutput><ref refid="class_sim_event" kindref="compound">SimEvent</ref></computeroutput>.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void log(const std::string&amp; log)</computeroutput></bold><itemizedlist>
<listitem><para>Logs a message for debugging or output purposes.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>log</computeroutput>: A string containing the message to log.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>TIME_TYPEDEF getTime() const</computeroutput></bold><itemizedlist>
<listitem><para>Retrieves the current simulation time.</para>
</listitem><listitem><para><bold>Returns:</bold> The current time as a <computeroutput>TIME_TYPEDEF</computeroutput>.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void endAt(TIME_TYPEDEF time)</computeroutput></bold><itemizedlist>
<listitem><para>Sets the simulation to stop at a specified tick.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>time</computeroutput>: The tick at which the simulation will end.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void stopRun()</computeroutput></bold><itemizedlist>
<listitem><para>Immediately stops the simulation from running.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void <ref refid="main_8cpp_1a13a43e6d814de94978c515cb084873b1" kindref="member">run()</ref></computeroutput></bold><itemizedlist>
<listitem><para>Starts the simulation and processes events until manually stopped or the end time is reached.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>Channel* getChannels()</computeroutput></bold><itemizedlist>
<listitem><para>Retrieves a pointer to the array of channels in the environment.</para>
</listitem><listitem><para><bold>Returns:</bold> A pointer to the <computeroutput><ref refid="class_channel" kindref="compound">Channel</ref></computeroutput> array.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void error(std::string s)</computeroutput></bold><itemizedlist>
<listitem><para>Throws a runtime error with a specified message.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>s</computeroutput>: A string containing the error message.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect3>
</sect2>
</sect1>
<sect1 id="md_doc_2_a_p_i_1autotoc_md6">
<title>SimEvent Class</title><para>The <computeroutput><ref refid="class_sim_event" kindref="compound">SimEvent</ref></computeroutput> class represents an event scheduled to occur at a specific time during the simulation. It supports chaining events and executing callback functions.</para>
<sect2 id="md_doc_2_a_p_i_1autotoc_md7">
<title>Attributes</title><para><itemizedlist>
<listitem><para><bold><computeroutput>emitTick</computeroutput></bold> (<computeroutput>TIME_TYPEDEF</computeroutput>): The simulation tick at which the event will be triggered.</para>
</listitem><listitem><para><bold><computeroutput>callback</computeroutput></bold> (<computeroutput>std::function&lt;void()&gt;</computeroutput>): A function to execute when the event is triggered.</para>
</listitem><listitem><para><bold><computeroutput>en</computeroutput></bold> (<computeroutput>Environment*</computeroutput>): A pointer to the <computeroutput><ref refid="class_environment" kindref="compound">Environment</ref></computeroutput> instance where the event is scheduled.</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="md_doc_2_a_p_i_1autotoc_md8">
<title>Methods</title><sect3 id="md_doc_2_a_p_i_1autotoc_md9">
<title>Constructor</title><para><itemizedlist>
<listitem><para><bold><computeroutput>explicit <ref refid="class_sim_event" kindref="compound">SimEvent</ref>(Environment* en, TIME_TYPEDEF emitTick, std::function&lt;void()&gt; callback)</computeroutput></bold><itemizedlist>
<listitem><para>Creates a new <computeroutput><ref refid="class_sim_event" kindref="compound">SimEvent</ref></computeroutput> object.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>en</computeroutput>: A pointer to the <computeroutput><ref refid="class_environment" kindref="compound">Environment</ref></computeroutput> instance in which the event is scheduled.</para>
</listitem><listitem><para><computeroutput>emitTick</computeroutput>: The simulation tick at which the event will be triggered.</para>
</listitem><listitem><para><computeroutput>callback</computeroutput>: A function to execute when the event is triggered.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect3>
<sect3 id="md_doc_2_a_p_i_1autotoc_md10">
<title>Public Methods</title><para><itemizedlist>
<listitem><para><bold><computeroutput>SimEvent* then(TIME_TYPEDEF delayTime, std::function&lt;void()&gt; callback)</computeroutput></bold><itemizedlist>
<listitem><para>Schedules a new event to occur after a specified delay from the current event&apos;s trigger time.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>delayTime</computeroutput>: The delay (in ticks) after the current event&apos;s <computeroutput>emitTick</computeroutput> when the new event should occur.</para>
</listitem><listitem><para><computeroutput>callback</computeroutput>: A function to execute for the new event.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>Returns:</bold> A pointer to the newly created <computeroutput><ref refid="class_sim_event" kindref="compound">SimEvent</ref></computeroutput>.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void emit()</computeroutput></bold><itemizedlist>
<listitem><para>Triggers the event by executing its callback function.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>TIME_TYPEDEF getEmitTick() const</computeroutput></bold><itemizedlist>
<listitem><para>Retrieves the simulation tick at which the event will be triggered.</para>
</listitem><listitem><para><bold>Returns:</bold> The event&apos;s <computeroutput>emitTick</computeroutput> as a <computeroutput>TIME_TYPEDEF</computeroutput>.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect3>
</sect2>
</sect1>
<sect1 id="md_doc_2_a_p_i_1autotoc_md11">
<title>Channel Class</title><para>The <computeroutput><ref refid="class_channel" kindref="compound">Channel</ref></computeroutput> class simulates a communication channel in the local network, supporting message transmission and device listening mechanisms. It emulates real-world wireless local network characteristics, including:</para>
<para><orderedlist>
<listitem><para><bold><ref refid="class_message" kindref="compound">Message</ref> Broadcast</bold>: When a device sends a message to the channel, all devices listening to the channel will receive the message.</para>
</listitem><listitem><para><bold><ref refid="class_message" kindref="compound">Message</ref> Collision</bold>: If multiple devices send messages simultaneously, the messages will collide, resulting in a garbled signal that cannot be interpreted.</para>
</listitem></orderedlist>
</para>
<sect2 id="md_doc_2_a_p_i_1autotoc_md12">
<title>Attributes</title><para><itemizedlist>
<listitem><para><bold><computeroutput>userNum</computeroutput></bold> (<computeroutput>uint8_t</computeroutput>): Tracks the number of devices currently sending messages to the channel.</para>
</listitem><listitem><para><bold><computeroutput>mixed</computeroutput></bold> (<computeroutput>bool</computeroutput>): Indicates whether signal interference has occurred on the channel.</para>
</listitem><listitem><para><bold><computeroutput>msg</computeroutput></bold> (<computeroutput>const Message*</computeroutput>): A pointer to the message currently being transmitted on the channel.</para>
</listitem><listitem><para><bold><computeroutput>listeners</computeroutput></bold> (<computeroutput>std::list&lt;Device*&gt;</computeroutput>): A list of devices currently listening to the channel.</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="md_doc_2_a_p_i_1autotoc_md13">
<title>Methods</title><sect3 id="md_doc_2_a_p_i_1autotoc_md14">
<title>Constructor</title><para><itemizedlist>
<listitem><para><bold><computeroutput>explicit <ref refid="class_channel" kindref="compound">Channel()</ref></computeroutput></bold><itemizedlist>
<listitem><para>Initializes a <computeroutput><ref refid="class_channel" kindref="compound">Channel</ref></computeroutput> object with no users (<computeroutput>userNum = 0</computeroutput>), no signal interference (<computeroutput>mixed = false</computeroutput>), and no active message.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect3>
<sect3 id="md_doc_2_a_p_i_1autotoc_md15">
<title>Public Methods</title><para><itemizedlist>
<listitem><para><bold><computeroutput>void occupy(const Message* msg)</computeroutput></bold><itemizedlist>
<listitem><para>Occupies the channel with a message for transmission.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>msg</computeroutput>: A pointer to the <computeroutput><ref refid="class_message" kindref="compound">Message</ref></computeroutput> to be transmitted.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void release()</computeroutput></bold><itemizedlist>
<listitem><para>Releases the channel, making it available for new transmissions.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void addListener(Device* d)</computeroutput></bold><itemizedlist>
<listitem><para>Adds a device to the channel&apos;s list of listeners.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>d</computeroutput>: A pointer to the <computeroutput><ref refid="class_device" kindref="compound">Device</ref></computeroutput> to be added as a listener.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void removeListener(Device* d)</computeroutput></bold><itemizedlist>
<listitem><para>Removes a device from the channel&apos;s list of listeners.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>d</computeroutput>: A pointer to the <computeroutput><ref refid="class_device" kindref="compound">Device</ref></computeroutput> to be removed.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>bool isBusy() const</computeroutput></bold><itemizedlist>
<listitem><para>Checks if the channel is currently occupied.</para>
</listitem><listitem><para><bold>Returns:</bold> <computeroutput>true</computeroutput> if the channel is occupied, <computeroutput>false</computeroutput> otherwise.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>bool isMixed() const</computeroutput></bold><itemizedlist>
<listitem><para>Checks if signal interference has occurred on the channel.</para>
</listitem><listitem><para><bold>Returns:</bold> <computeroutput>true</computeroutput> if interference is present, <computeroutput>false</computeroutput> otherwise.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>const Message* getMsg() const</computeroutput></bold><itemizedlist>
<listitem><para>Retrieves the message currently being transmitted on the channel.</para>
</listitem><listitem><para><bold>Returns:</bold> A pointer to the <computeroutput><ref refid="class_message" kindref="compound">Message</ref></computeroutput>.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>std::list&lt;Device*&gt; getListeners() const</computeroutput></bold><itemizedlist>
<listitem><para>Retrieves the list of devices currently listening to the channel.</para>
</listitem><listitem><para><bold>Returns:</bold> A list of pointers to <computeroutput><ref refid="class_device" kindref="compound">Device</ref></computeroutput> objects.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void error(std::string s)</computeroutput></bold><itemizedlist>
<listitem><para>Throws a runtime error with a specified message.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>s</computeroutput>: A string containing the error message.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect3>
</sect2>
</sect1>
<sect1 id="md_doc_2_a_p_i_1autotoc_md16">
<title>Device Class</title><para>The <computeroutput><ref refid="class_device" kindref="compound">Device</ref></computeroutput> class represents a physical device in the simulated network. It can send and receive messages, listen to channels, and manage its busy or waiting states.</para>
<sect2 id="md_doc_2_a_p_i_1autotoc_md17">
<title>Attributes</title><para><itemizedlist>
<listitem><para><bold><computeroutput>addr</computeroutput></bold> (<computeroutput>ADDR_TYPEDEF</computeroutput>): The address of the device.</para>
</listitem><listitem><para><bold><computeroutput>en</computeroutput></bold> (<computeroutput>Environment*</computeroutput>): A pointer to the environment where the device operates.</para>
</listitem><listitem><para><bold><computeroutput>txDelay</computeroutput></bold> (<computeroutput>TIME_TYPEDEF</computeroutput>): The time delay required for the device to transmit a message.</para>
</listitem><listitem><para><bold><computeroutput>busy</computeroutput></bold> (<computeroutput>bool</computeroutput>): Indicates whether the device is currently busy sending messages.</para>
</listitem><listitem><para><bold><computeroutput>waiting</computeroutput></bold> (<computeroutput>bool</computeroutput>): Indicates whether the device is in a waiting state to access a channel.</para>
</listitem><listitem><para><bold><computeroutput>onBusyChanged</computeroutput></bold> (<computeroutput>std::function&lt;void(bool)&gt;</computeroutput>): A callback function triggered when the device&apos;s busy state changes.</para>
</listitem><listitem><para><bold><computeroutput>onWaitingChanged</computeroutput></bold> (<computeroutput>std::function&lt;void(bool)&gt;</computeroutput>): A callback function triggered when the device&apos;s waiting state changes.</para>
</listitem><listitem><para><bold><computeroutput>listeningIndex</computeroutput></bold> (<computeroutput>CHANNEL_INDEX_TYPEDEF</computeroutput>): The index of the channel the device is currently listening to.</para>
</listitem><listitem><para><bold><computeroutput>logEnable</computeroutput></bold> (<computeroutput>bool</computeroutput>): Controls whether the device&apos;s actions are logged.</para>
</listitem><listitem><para><bold><computeroutput>msgQueue</computeroutput></bold> (<computeroutput>std::queue&lt;std::tuple&lt;std::string, CHANNEL_INDEX_TYPEDEF, ADDR_TYPEDEF&gt;&gt;</computeroutput>): A queue storing messages to be sent, with each message containing a payload, target channel, and target address.</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="md_doc_2_a_p_i_1autotoc_md18">
<title>Methods</title><sect3 id="md_doc_2_a_p_i_1autotoc_md19">
<title>Constructor</title><para><itemizedlist>
<listitem><para><bold><computeroutput>explicit <ref refid="class_device" kindref="compound">Device(ADDR_TYPEDEF addr, Environment* en)</ref></computeroutput></bold><itemizedlist>
<listitem><para>Initializes a <computeroutput><ref refid="class_device" kindref="compound">Device</ref></computeroutput> object with a specific address and environment.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>addr</computeroutput>: The address of the device.</para>
</listitem><listitem><para><computeroutput>en</computeroutput>: A pointer to the <computeroutput><ref refid="class_environment" kindref="compound">Environment</ref></computeroutput> where the device operates.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect3>
<sect3 id="md_doc_2_a_p_i_1autotoc_md20">
<title>Protected Methods</title><para><itemizedlist>
<listitem><para><bold><computeroutput>void send(const std::string&amp; payload, CHANNEL_INDEX_TYPEDEF channelIndex, ADDR_TYPEDEF target)</computeroutput></bold><itemizedlist>
<listitem><para>Enqueues a message to be sent.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>payload</computeroutput>: The message content.</para>
</listitem><listitem><para><computeroutput>channelIndex</computeroutput>: The target channel index.</para>
</listitem><listitem><para><computeroutput>target</computeroutput>: The target address.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void log(const std::string&amp; log)</computeroutput></bold><itemizedlist>
<listitem><para>Logs the specified message if logging is enabled.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>log</computeroutput>: The message to log.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect3>
<sect3 id="md_doc_2_a_p_i_1autotoc_md21">
<title>Public Methods</title><para><itemizedlist>
<listitem><para><bold><computeroutput>void recieve(const Message* msg, CHANNEL_INDEX_TYPEDEF channelIndex)</computeroutput></bold><itemizedlist>
<listitem><para>Handles receiving a message on a specific channel.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>msg</computeroutput>: A pointer to the received <computeroutput><ref refid="class_message" kindref="compound">Message</ref></computeroutput>.</para>
</listitem><listitem><para><computeroutput>channelIndex</computeroutput>: The index of the channel where the message was received.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>ADDR_TYPEDEF getAddr() const</computeroutput></bold><itemizedlist>
<listitem><para>Retrieves the device&apos;s address.</para>
</listitem><listitem><para><bold>Returns:</bold> The device&apos;s <computeroutput>ADDR_TYPEDEF</computeroutput>.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void listenTo(CHANNEL_INDEX_TYPEDEF channelIndex)</computeroutput></bold><itemizedlist>
<listitem><para>Sets the device to listen to a specific channel.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>channelIndex</computeroutput>: The index of the channel to listen to.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void setBusy(bool v)</computeroutput></bold><itemizedlist>
<listitem><para>Updates the device&apos;s busy state and triggers the <computeroutput>onBusyChanged</computeroutput> callback if defined.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>v</computeroutput>: The new busy state (<computeroutput>true</computeroutput> or <computeroutput>false</computeroutput>).</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void setWaiting(bool v)</computeroutput></bold><itemizedlist>
<listitem><para>Updates the device&apos;s waiting state and triggers the <computeroutput>onWaitingChanged</computeroutput> callback if defined.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>v</computeroutput>: The new waiting state (<computeroutput>true</computeroutput> or <computeroutput>false</computeroutput>).</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void setOnBusyChanged(std::function&lt;void(bool)&gt; callback)</computeroutput></bold><itemizedlist>
<listitem><para>Sets the callback function for busy state changes.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>callback</computeroutput>: A function to execute when the busy state changes.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void setOnWaitingChanged(std::function&lt;void(bool)&gt; callback)</computeroutput></bold><itemizedlist>
<listitem><para>Sets the callback function for waiting state changes.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>callback</computeroutput>: A function to execute when the waiting state changes.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void setLogEnable(bool v)</computeroutput></bold><itemizedlist>
<listitem><para>Enables or disables logging for the device.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>v</computeroutput>: <computeroutput>true</computeroutput> to enable logging, <computeroutput>false</computeroutput> to disable.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void error(std::string s)</computeroutput></bold><itemizedlist>
<listitem><para>Throws a runtime error with the specified message.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>s</computeroutput>: A string containing the error message.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect3>
</sect2>
</sect1>
<sect1 id="md_doc_2_a_p_i_1autotoc_md22">
<title>ProtocolDevice Class</title><para>The <computeroutput><ref refid="class_protocol_device" kindref="compound">ProtocolDevice</ref></computeroutput> class extends the <computeroutput><ref refid="class_device" kindref="compound">Device</ref></computeroutput> class and provides functionality for handling protocol-specific communication with other devices. It supports message sending, receiving, and callback management.</para>
<sect2 id="md_doc_2_a_p_i_1autotoc_md23">
<title>Attributes</title><para><itemizedlist>
<listitem><para><bold><computeroutput>callbacks</computeroutput></bold> (<computeroutput>std::unordered_map&lt;MsgType, std::function&lt;void(ADDR_TYPEDEF, const std::string&amp;)&gt;&gt;</computeroutput>): A map of registered callbacks for specific message types.</para>
</listitem><listitem><para><bold><computeroutput>onceCallbacks</computeroutput></bold> (<computeroutput>std::unordered_map&lt;MsgType, std::function&lt;void(ADDR_TYPEDEF, const std::string&amp;)&gt;&gt;</computeroutput>): A map of one-time callbacks for specific message types.</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="md_doc_2_a_p_i_1autotoc_md24">
<title>Methods</title><sect3 id="md_doc_2_a_p_i_1autotoc_md25">
<title>Constructor</title><para><itemizedlist>
<listitem><para><bold><computeroutput>explicit <ref refid="class_protocol_device" kindref="compound">ProtocolDevice(ADDR_TYPEDEF addr, Environment* en)</ref></computeroutput></bold><itemizedlist>
<listitem><para>Initializes the <computeroutput><ref refid="class_protocol_device" kindref="compound">ProtocolDevice</ref></computeroutput> object with the provided address and environment.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>addr</computeroutput>: The address of the device.</para>
</listitem><listitem><para><computeroutput>en</computeroutput>: A pointer to the environment.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect3>
<sect3 id="md_doc_2_a_p_i_1autotoc_md26">
<title>Utility Methods</title><para><itemizedlist>
<listitem><para><bold><computeroutput>std::string formatKeyStr(const std::string&amp; key)</computeroutput></bold><itemizedlist>
<listitem><para>Formats the given key string to a specific length, adding &apos;x&apos; at the beginning or truncating if necessary.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>key</computeroutput>: The key string to format.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>Returns:</bold> A formatted key string.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>std::string MsgTypeToHexString(MsgType num)</computeroutput></bold><itemizedlist>
<listitem><para>Converts a <computeroutput>MsgType</computeroutput> value to its hexadecimal string representation.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>num</computeroutput>: The message type to convert.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>Returns:</bold> A hexadecimal string representing the message type.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>MsgType hexStringToMsgType(const std::string&amp; hexStr)</computeroutput></bold><itemizedlist>
<listitem><para>Converts a hexadecimal string to a <computeroutput>MsgType</computeroutput> value.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>hexStr</computeroutput>: The hexadecimal string to convert.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>Returns:</bold> The corresponding <computeroutput>MsgType</computeroutput> value.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect3>
<sect3 id="md_doc_2_a_p_i_1autotoc_md27">
<title>Sending Messages</title><para><itemizedlist>
<listitem><para><bold><computeroutput>void send(MsgType type, const std::string payload, CHANNEL_INDEX_TYPEDEF channelIndex, ADDR_TYPEDEF target)</computeroutput></bold><itemizedlist>
<listitem><para>Sends a message with a <computeroutput>MsgType</computeroutput> and payload to a specific target.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>type</computeroutput>: The message type.</para>
</listitem><listitem><para><computeroutput>payload</computeroutput>: The message content.</para>
</listitem><listitem><para><computeroutput>channelIndex</computeroutput>: The target channel.</para>
</listitem><listitem><para><computeroutput>target</computeroutput>: The target address.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void send(MsgType type, CHANNEL_INDEX_TYPEDEF channelIndex, ADDR_TYPEDEF target)</computeroutput></bold><itemizedlist>
<listitem><para>Sends a message with a <computeroutput>MsgType</computeroutput> to a specific target without a payload.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>type</computeroutput>: The message type.</para>
</listitem><listitem><para><computeroutput>channelIndex</computeroutput>: The target channel.</para>
</listitem><listitem><para><computeroutput>target</computeroutput>: The target address.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void send(MsgType type, const std::string payload, CHANNEL_INDEX_TYPEDEF channelIndex, ADDR_TYPEDEF target, std::function&lt;void(ADDR_TYPEDEF, const std::string&amp;)&gt; callback)</computeroutput></bold><itemizedlist>
<listitem><para>Sends a message with a <computeroutput>MsgType</computeroutput> and payload to a specific target and registers a one-time callback for the response.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>type</computeroutput>: The message type.</para>
</listitem><listitem><para><computeroutput>payload</computeroutput>: The message content.</para>
</listitem><listitem><para><computeroutput>channelIndex</computeroutput>: The target channel.</para>
</listitem><listitem><para><computeroutput>target</computeroutput>: The target address.</para>
</listitem><listitem><para><computeroutput>callback</computeroutput>: A callback function to execute when a response is received.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void send(MsgType type, CHANNEL_INDEX_TYPEDEF channelIndex, ADDR_TYPEDEF target, std::function&lt;void(ADDR_TYPEDEF, const std::string&amp;)&gt; callback)</computeroutput></bold><itemizedlist>
<listitem><para>Sends a message with a <computeroutput>MsgType</computeroutput> to a specific target and registers a one-time callback for the response.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>type</computeroutput>: The message type.</para>
</listitem><listitem><para><computeroutput>channelIndex</computeroutput>: The target channel.</para>
</listitem><listitem><para><computeroutput>target</computeroutput>: The target address.</para>
</listitem><listitem><para><computeroutput>callback</computeroutput>: A callback function to execute when a response is received.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect3>
<sect3 id="md_doc_2_a_p_i_1autotoc_md28">
<title>Callback Management</title><para><itemizedlist>
<listitem><para><bold><computeroutput>void on(MsgType type, std::function&lt;void(ADDR_TYPEDEF, const std::string&amp;)&gt; callback)</computeroutput></bold><itemizedlist>
<listitem><para>Registers a callback function to be executed when a message of the specified type is received.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>type</computeroutput>: The message type.</para>
</listitem><listitem><para><computeroutput>callback</computeroutput>: The callback function to execute.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void once(MsgType type, std::function&lt;void(ADDR_TYPEDEF, const std::string&amp;)&gt; callback)</computeroutput></bold><itemizedlist>
<listitem><para>Registers a one-time callback function to be executed once when a message of the specified type is received.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>type</computeroutput>: The message type.</para>
</listitem><listitem><para><computeroutput>callback</computeroutput>: The callback function to execute.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void msgHandler(ADDR_TYPEDEF senderAddr, MsgType type, const std::string&amp; payload)</computeroutput></bold><itemizedlist>
<listitem><para>Handles the received message by executing the appropriate callback.</para>
</listitem><listitem><para>If the message has a one-time callback, it is executed and removed from the <computeroutput>onceCallbacks</computeroutput>.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>senderAddr</computeroutput>: The address of the sender.</para>
</listitem><listitem><para><computeroutput>type</computeroutput>: The message type.</para>
</listitem><listitem><para><computeroutput>payload</computeroutput>: The message content.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect3>
<sect3 id="md_doc_2_a_p_i_1autotoc_md29">
<title>Receiving Messages</title><para><itemizedlist>
<listitem><para><bold><computeroutput>void recieve(const Message* msg, CHANNEL_INDEX_TYPEDEF channelIndex) override</computeroutput></bold><itemizedlist>
<listitem><para>Receives a message and processes it if the message&apos;s target is the current device.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>msg</computeroutput>: The message to receive.</para>
</listitem><listitem><para><computeroutput>channelIndex</computeroutput>: The channel index the message was received on.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect3>
<sect3 id="md_doc_2_a_p_i_1autotoc_md30">
<title>Logging</title><para><itemizedlist>
<listitem><para><bold><computeroutput>void log(const std::string&amp; who, const std::string&amp; log)</computeroutput></bold><itemizedlist>
<listitem><para>Logs a message with a specific prefix indicating the origin of the message.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>who</computeroutput>: The source of the log (e.g., &quot;ProtocolDevice&quot;).</para>
</listitem><listitem><para><computeroutput>log</computeroutput>: The message content to log.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect3>
</sect2>
</sect1>
<sect1 id="md_doc_2_a_p_i_1autotoc_md31">
<title>Server Class</title><para>The <computeroutput><ref refid="class_server" kindref="compound">Server</ref></computeroutput> class extends the <computeroutput><ref refid="class_protocol_device" kindref="compound">ProtocolDevice</ref></computeroutput> class to manage and coordinate <computeroutput><ref refid="struct_robot_data" kindref="compound">RobotData</ref></computeroutput> and <computeroutput><ref refid="struct_station_data" kindref="compound">StationData</ref></computeroutput>. It provides functionalities to handle robot and station information, login key management, and channel listening.</para>
<sect2 id="md_doc_2_a_p_i_1autotoc_md32">
<title>Attributes</title><para><itemizedlist>
<listitem><para><bold><computeroutput>robotsInfo</computeroutput></bold> (<computeroutput>std::unordered_map&lt;ADDR_TYPEDEF, RobotData*&gt;</computeroutput>): A mapping of robot addresses to their corresponding <computeroutput><ref refid="struct_robot_data" kindref="compound">RobotData</ref></computeroutput> objects.</para>
</listitem><listitem><para><bold><computeroutput>stationsInfo</computeroutput></bold> (<computeroutput>std::unordered_map&lt;ADDR_TYPEDEF, StationData*&gt;</computeroutput>): A mapping of station addresses to their corresponding <computeroutput><ref refid="struct_station_data" kindref="compound">StationData</ref></computeroutput> objects.</para>
</listitem><listitem><para><bold><computeroutput>robotLoginKey</computeroutput></bold> (<computeroutput>std::string</computeroutput>): The formatted key for robot login.</para>
</listitem><listitem><para><bold><computeroutput>stationLoginKey</computeroutput></bold> (<computeroutput>std::string</computeroutput>): The formatted key for station login.</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="md_doc_2_a_p_i_1autotoc_md33">
<title>Methods</title><sect3 id="md_doc_2_a_p_i_1autotoc_md34">
<title>Constructor</title><para><itemizedlist>
<listitem><para><bold><computeroutput>explicit <ref refid="class_server" kindref="compound">Server(ADDR_TYPEDEF addr, Environment* en)</ref></computeroutput></bold><itemizedlist>
<listitem><para>Initializes the <computeroutput><ref refid="class_server" kindref="compound">Server</ref></computeroutput> object with a specific address and environment.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>addr</computeroutput>: The server&apos;s address.</para>
</listitem><listitem><para><computeroutput>en</computeroutput>: A pointer to the <computeroutput><ref refid="class_environment" kindref="compound">Environment</ref></computeroutput>.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect3>
<sect3 id="md_doc_2_a_p_i_1autotoc_md35">
<title>Public Methods</title><para><itemizedlist>
<listitem><para><bold><computeroutput>bool isRobot(ADDR_TYPEDEF addr)</computeroutput></bold><itemizedlist>
<listitem><para>Checks if a given address belongs to a robot.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>addr</computeroutput>: The address to check.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>Returns:</bold> <computeroutput>true</computeroutput> if the address belongs to a robot, <computeroutput>false</computeroutput> otherwise.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>bool isStation(ADDR_TYPEDEF addr)</computeroutput></bold><itemizedlist>
<listitem><para>Checks if a given address belongs to a station.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>addr</computeroutput>: The address to check.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>Returns:</bold> <computeroutput>true</computeroutput> if the address belongs to a station, <computeroutput>false</computeroutput> otherwise.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>StationData* getFreeStation()</computeroutput></bold><itemizedlist>
<listitem><para>Retrieves a pointer to a free station.</para>
</listitem><listitem><para><bold>Returns:</bold> A pointer to a <computeroutput><ref refid="struct_station_data" kindref="compound">StationData</ref></computeroutput> object, or <computeroutput>nullptr</computeroutput> if no free station is available.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void setStationStatus(ADDR_TYPEDEF addr, bool free)</computeroutput></bold><itemizedlist>
<listitem><para>Updates the status of a station (free or busy).</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>addr</computeroutput>: The station address.</para>
</listitem><listitem><para><computeroutput>free</computeroutput>: The new status (<computeroutput>true</computeroutput> for free, <computeroutput>false</computeroutput> for busy).</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void setRobotLoginKey(const std::string&amp; key)</computeroutput></bold><itemizedlist>
<listitem><para>Sets the robot login key.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>key</computeroutput>: The login key string.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void setStationLoginKey(const std::string&amp; key)</computeroutput></bold><itemizedlist>
<listitem><para>Sets the station login key.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>key</computeroutput>: The login key string.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void addRobotAddr(ADDR_TYPEDEF addr)</computeroutput></bold><itemizedlist>
<listitem><para>Adds a robot address to the <computeroutput>robotsInfo</computeroutput> map.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>addr</computeroutput>: The robot address.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void addStationAddr(ADDR_TYPEDEF addr)</computeroutput></bold><itemizedlist>
<listitem><para>Adds a station address to the <computeroutput>stationsInfo</computeroutput> map.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>addr</computeroutput>: The station address.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void listenTo(CHANNEL_INDEX_TYPEDEF channelIndex)</computeroutput></bold><itemizedlist>
<listitem><para>Listens to a specific channel and logs the action.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>channelIndex</computeroutput>: The index of the channel to listen to.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void log(const std::string&amp; log)</computeroutput></bold><itemizedlist>
<listitem><para>Logs a message with the prefix &quot;Server.&quot;</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>log</computeroutput>: The message to log.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect3>
</sect2>
</sect1>
<sect1 id="md_doc_2_a_p_i_1autotoc_md36">
<title>Robot Class</title><para>The <computeroutput><ref refid="class_robot" kindref="compound">Robot</ref></computeroutput> class extends the <computeroutput><ref refid="class_protocol_device" kindref="compound">ProtocolDevice</ref></computeroutput> class and represents a robotic device that can interact with a server and charging stations. It handles communication, navigation, charging, and login operations.</para>
<sect2 id="md_doc_2_a_p_i_1autotoc_md37">
<title>Attributes</title><para><itemizedlist>
<listitem><para><bold><computeroutput>needCharging</computeroutput></bold> (<computeroutput>bool</computeroutput>): Indicates if the robot requires charging.</para>
</listitem><listitem><para><bold><computeroutput>loginSuccess</computeroutput></bold> (<computeroutput>bool</computeroutput>): Indicates if the robot has successfully logged in.</para>
</listitem><listitem><para><bold><computeroutput>power</computeroutput></bold> (<computeroutput>POWER_TYPEDEF</computeroutput>): The robot&apos;s current power level.</para>
</listitem><listitem><para><bold><computeroutput>chargingStationAddr</computeroutput></bold> (<computeroutput>ADDR_TYPEDEF</computeroutput>): The address of the charging station the robot is associated with.</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="md_doc_2_a_p_i_1autotoc_md38">
<title>Methods</title><sect3 id="md_doc_2_a_p_i_1autotoc_md39">
<title>Constructor</title><para><itemizedlist>
<listitem><para><bold><computeroutput>explicit <ref refid="class_robot" kindref="compound">Robot(ADDR_TYPEDEF addr, Environment* en)</ref></computeroutput></bold><itemizedlist>
<listitem><para>Initializes the <computeroutput><ref refid="class_robot" kindref="compound">Robot</ref></computeroutput> object with a specific address and environment.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>addr</computeroutput>: The robot&apos;s address.</para>
</listitem><listitem><para><computeroutput>en</computeroutput>: A pointer to the <computeroutput><ref refid="class_environment" kindref="compound">Environment</ref></computeroutput>.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect3>
<sect3 id="md_doc_2_a_p_i_1autotoc_md40">
<title>Public Methods</title><para><itemizedlist>
<listitem><para><bold><computeroutput>void listenTo(CHANNEL_INDEX_TYPEDEF channelIndex)</computeroutput></bold><itemizedlist>
<listitem><para>Listens to a specific channel and logs the action.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>channelIndex</computeroutput>: The index of the channel to listen to.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void log(const std::string&amp; log)</computeroutput></bold><itemizedlist>
<listitem><para>Logs a message with the prefix &quot;Robot.&quot;</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>log</computeroutput>: The message to log.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void gotoPosition(Position pos)</computeroutput></bold><itemizedlist>
<listitem><para>Logs the action of moving to a specific position.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>pos</computeroutput>: The target position, with <computeroutput>x</computeroutput> and <computeroutput>y</computeroutput> coordinates.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void chagingUp()</computeroutput></bold><itemizedlist>
<listitem><para>Increases the robot&apos;s power level by 20 units.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>POWER_TYPEDEF getPower() const</computeroutput></bold><itemizedlist>
<listitem><para>Retrieves the robot&apos;s current power level.</para>
</listitem><listitem><para><bold>Returns:</bold> The power level as a <computeroutput>POWER_TYPEDEF</computeroutput>.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect3>
<sect3 id="md_doc_2_a_p_i_1autotoc_md41">
<title>Communication with Server</title><para><itemizedlist>
<listitem><para><bold><computeroutput>void login(std::string loginKey)</computeroutput></bold><itemizedlist>
<listitem><para>Logs in to the server using a specific key.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>loginKey</computeroutput>: The login key as a string.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void needCharge()</computeroutput></bold><itemizedlist>
<listitem><para>Sends a request to the server indicating the need for charging.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void sendToServer(MsgType type, const std::string payload)</computeroutput></bold><itemizedlist>
<listitem><para>Sends a message with a payload to the server.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>type</computeroutput>: The message type.</para>
</listitem><listitem><para><computeroutput>payload</computeroutput>: The message payload.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void sendToServer(MsgType type)</computeroutput></bold><itemizedlist>
<listitem><para>Sends a message to the server without a payload.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>type</computeroutput>: The message type.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void sendToServer(MsgType type, const std::string payload, std::function&lt;void(ADDR_TYPEDEF, const std::string&amp;)&gt; callback)</computeroutput></bold><itemizedlist>
<listitem><para>Sends a message with a payload to the server and registers a callback for the response.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>type</computeroutput>: The message type.</para>
</listitem><listitem><para><computeroutput>payload</computeroutput>: The message payload.</para>
</listitem><listitem><para><computeroutput>callback</computeroutput>: A function to handle the server&apos;s response.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void sendToServer(MsgType type, std::function&lt;void(ADDR_TYPEDEF, const std::string&amp;)&gt; callback)</computeroutput></bold><itemizedlist>
<listitem><para>Sends a message to the server without a payload and registers a callback for the response.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>type</computeroutput>: The message type.</para>
</listitem><listitem><para><computeroutput>callback</computeroutput>: A function to handle the server&apos;s response.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect3>
<sect3 id="md_doc_2_a_p_i_1autotoc_md42">
<title>Communication with Station</title><para><itemizedlist>
<listitem><para><bold><computeroutput>void sendHandshakeToStation(std::string handShakey, ADDR_TYPEDEF stationAddr, CHANNEL_INDEX_TYPEDEF channelIndex)</computeroutput></bold><itemizedlist>
<listitem><para>Sends a handshake message to a charging station.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>handShakey</computeroutput>: The handshake key.</para>
</listitem><listitem><para><computeroutput>stationAddr</computeroutput>: The address of the station.</para>
</listitem><listitem><para><computeroutput>channelIndex</computeroutput>: The channel index for communication.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void keepAliveWhenCharging()</computeroutput></bold><itemizedlist>
<listitem><para>Sends periodic signals to indicate the robot is active while charging.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void sendPowerFinish(ADDR_TYPEDEF stationAddr)</computeroutput></bold><itemizedlist>
<listitem><para>Sends a message to the station indicating the charging process is complete.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>stationAddr</computeroutput>: The address of the charging station.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect3>
</sect2>
</sect1>
<sect1 id="md_doc_2_a_p_i_1autotoc_md43">
<title>Station Class</title><para>The <computeroutput><ref refid="class_station" kindref="compound">Station</ref></computeroutput> class extends the <computeroutput><ref refid="class_protocol_device" kindref="compound">ProtocolDevice</ref></computeroutput> class and represents a station that can be used by robots for various operations, such as charging. It handles communication with the server, state management, and position updates.</para>
<sect2 id="md_doc_2_a_p_i_1autotoc_md44">
<title>Attributes</title><para><itemizedlist>
<listitem><para><bold><computeroutput>occupied</computeroutput></bold> (<computeroutput>bool</computeroutput>): Indicates whether the station is occupied by a robot.</para>
</listitem><listitem><para><bold><computeroutput>loginSuccess</computeroutput></bold> (<computeroutput>bool</computeroutput>): A flag indicating whether the login process was successful.</para>
</listitem><listitem><para><bold><computeroutput>x</computeroutput></bold> (<computeroutput>POSITION_UNIT_TYPEDEF</computeroutput>): The x-coordinate of the station&apos;s position.</para>
</listitem><listitem><para><bold><computeroutput>y</computeroutput></bold> (<computeroutput>POSITION_UNIT_TYPEDEF</computeroutput>): The y-coordinate of the station&apos;s position.</para>
</listitem><listitem><para><bold><computeroutput>chargingBotAddr</computeroutput></bold> (<computeroutput>ADDR_TYPEDEF</computeroutput>): The address of the robot that is currently charging at the station.</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="md_doc_2_a_p_i_1autotoc_md45">
<title>Methods</title><sect3 id="md_doc_2_a_p_i_1autotoc_md46">
<title>Constructor</title><para><itemizedlist>
<listitem><para><bold><computeroutput>explicit <ref refid="class_station" kindref="compound">Station(ADDR_TYPEDEF addr, Environment* en, POSITION_UNIT_TYPEDEF x, POSITION_UNIT_TYPEDEF y)</ref></computeroutput></bold><itemizedlist>
<listitem><para>Initializes the <computeroutput><ref refid="class_station" kindref="compound">Station</ref></computeroutput> object with the provided address, environment, and position.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>addr</computeroutput>: The station&apos;s address.</para>
</listitem><listitem><para><computeroutput>en</computeroutput>: A pointer to the <computeroutput><ref refid="class_environment" kindref="compound">Environment</ref></computeroutput>.</para>
</listitem><listitem><para><computeroutput>x</computeroutput>: The x-coordinate of the station&apos;s position.</para>
</listitem><listitem><para><computeroutput>y</computeroutput>: The y-coordinate of the station&apos;s position.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect3>
<sect3 id="md_doc_2_a_p_i_1autotoc_md47">
<title>Public Methods</title><para><itemizedlist>
<listitem><para><bold><computeroutput>void log(const std::string&amp; log)</computeroutput></bold><itemizedlist>
<listitem><para>Logs a message with the prefix &quot;Station.&quot;</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>log</computeroutput>: The message to log.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void sendToServer(MsgType type, const std::string payload)</computeroutput></bold><itemizedlist>
<listitem><para>Sends a message with a payload to the server.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>type</computeroutput>: The type of the message.</para>
</listitem><listitem><para><computeroutput>payload</computeroutput>: The message content.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void sendToServer(MsgType type)</computeroutput></bold><itemizedlist>
<listitem><para>Sends a message to the server without a payload.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>type</computeroutput>: The type of the message.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void sendToServer(MsgType type, const std::string payload, std::function&lt;void(ADDR_TYPEDEF, const std::string&amp;)&gt; callback)</computeroutput></bold><itemizedlist>
<listitem><para>Sends a message with a payload to the server and provides a callback for a response.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>type</computeroutput>: The type of the message.</para>
</listitem><listitem><para><computeroutput>payload</computeroutput>: The message content.</para>
</listitem><listitem><para><computeroutput>callback</computeroutput>: The callback function to handle the response.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void sendToServer(MsgType type, std::function&lt;void(ADDR_TYPEDEF, const std::string&amp;)&gt; callback)</computeroutput></bold><itemizedlist>
<listitem><para>Sends a message to the server and provides a callback for a response.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>type</computeroutput>: The type of the message.</para>
</listitem><listitem><para><computeroutput>callback</computeroutput>: The callback function to handle the response.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void login(std::string loginKey)</computeroutput></bold><itemizedlist>
<listitem><para>Logs the station into the server using the provided login key.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>loginKey</computeroutput>: The login key for authentication.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void updateFreeToServer(bool free)</computeroutput></bold><itemizedlist>
<listitem><para>Updates the station&apos;s status (free or occupied) to the server.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>free</computeroutput>: <computeroutput>true</computeroutput> if the station is free, <computeroutput>false</computeroutput> if occupied.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void updatePositionToServer()</computeroutput></bold><itemizedlist>
<listitem><para>Updates the station&apos;s position to the server.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>POSITION_UNIT_TYPEDEF getX()</computeroutput></bold><itemizedlist>
<listitem><para>Returns the x-coordinate of the station&apos;s position.</para>
</listitem><listitem><para><bold>Returns:</bold> The x-coordinate of the station.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>POSITION_UNIT_TYPEDEF getY()</computeroutput></bold><itemizedlist>
<listitem><para>Returns the y-coordinate of the station&apos;s position.</para>
</listitem><listitem><para><bold>Returns:</bold> The y-coordinate of the station.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold><computeroutput>void setOccupied(bool v)</computeroutput></bold><itemizedlist>
<listitem><para>Sets the station&apos;s occupancy status and updates its status to the server.</para>
</listitem><listitem><para><bold>Parameters:</bold><itemizedlist>
<listitem><para><computeroutput>v</computeroutput>: <computeroutput>true</computeroutput> to mark the station as occupied, <computeroutput>false</computeroutput> to mark it as free. </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect3>
</sect2>
</sect1>
    </detaileddescription>
    <location file="doc/API.md"/>
  </compounddef>
</doxygen>
