<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="class_sim_event" kind="class" language="C++" prot="public">
    <compoundname>SimEvent</compoundname>
    <includes refid="_sim_event_8h" local="no">SimEvent.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_sim_event_1aa2a54d95d9972da78f0be25446e08a95" prot="private" static="no" mutable="no">
        <type><ref refid="__common_8h_1a3aace27b10c3e64c3fdccbe040b919f2" kindref="member">TIME_TYPEDEF</ref></type>
        <definition>TIME_TYPEDEF SimEvent::emitTick</definition>
        <argsstring></argsstring>
        <name>emitTick</name>
        <qualifiedname>SimEvent::emitTick</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SimEvent.h" line="8" column="18" bodyfile="include/SimEvent.h" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sim_event_1a75a3df83862f391217e76cf8b5cd4839" prot="private" static="no" mutable="no">
        <type>std::function&lt; void()&gt;</type>
        <definition>std::function&lt;void()&gt; SimEvent::callback</definition>
        <argsstring></argsstring>
        <name>callback</name>
        <qualifiedname>SimEvent::callback</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SimEvent.h" line="9" column="19" bodyfile="include/SimEvent.h" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sim_event_1a2de8a0ed0e17d8750202636e3dcf7de6" prot="private" static="no" mutable="no">
        <type><ref refid="class_environment" kindref="compound">Environment</ref> *</type>
        <definition>Environment* SimEvent::en</definition>
        <argsstring></argsstring>
        <name>en</name>
        <qualifiedname>SimEvent::en</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SimEvent.h" line="10" column="17" bodyfile="include/SimEvent.h" bodystart="10" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_sim_event_1a7e14a8f9726c5d4369cdc1fd4e11770c" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>SimEvent::SimEvent</definition>
        <argsstring>(Environment *en, TIME_TYPEDEF emitTick, std::function&lt; void()&gt; callback)</argsstring>
        <name>SimEvent</name>
        <qualifiedname>SimEvent::SimEvent</qualifiedname>
        <param>
          <type><ref refid="class_environment" kindref="compound">Environment</ref> *</type>
          <declname>en</declname>
        </param>
        <param>
          <type><ref refid="__common_8h_1a3aace27b10c3e64c3fdccbe040b919f2" kindref="member">TIME_TYPEDEF</ref></type>
          <declname>emitTick</declname>
        </param>
        <param>
          <type>std::function&lt; void()&gt;</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SimEvent.h" line="13" column="14" bodyfile="src/SimEvent.cpp" bodystart="3" bodyend="7"/>
      </memberdef>
      <memberdef kind="function" id="class_sim_event_1a931ac60ebd300eae7ad05f2b40197ee3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_sim_event" kindref="compound">SimEvent</ref> *</type>
        <definition>SimEvent * SimEvent::then</definition>
        <argsstring>(TIME_TYPEDEF delayTime, std::function&lt; void()&gt; callback)</argsstring>
        <name>then</name>
        <qualifiedname>SimEvent::then</qualifiedname>
        <param>
          <type><ref refid="__common_8h_1a3aace27b10c3e64c3fdccbe040b919f2" kindref="member">TIME_TYPEDEF</ref></type>
          <declname>delayTime</declname>
        </param>
        <param>
          <type>std::function&lt; void()&gt;</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SimEvent.h" line="14" column="14" bodyfile="src/SimEvent.cpp" bodystart="13" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="class_sim_event_1a7e49f244ab65e1eedc879cc8ee130c3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SimEvent::emit</definition>
        <argsstring>()</argsstring>
        <name>emit</name>
        <qualifiedname>SimEvent::emit</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SimEvent.h" line="15" column="10" bodyfile="src/SimEvent.cpp" bodystart="9" bodyend="11"/>
      </memberdef>
      <memberdef kind="function" id="class_sim_event_1a24c6ed79591db033b7e6ca11582df889" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="__common_8h_1a3aace27b10c3e64c3fdccbe040b919f2" kindref="member">TIME_TYPEDEF</ref></type>
        <definition>TIME_TYPEDEF SimEvent::getEmitTick</definition>
        <argsstring>() const</argsstring>
        <name>getEmitTick</name>
        <qualifiedname>SimEvent::getEmitTick</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/SimEvent.h" line="16" column="25" bodyfile="include/SimEvent.h" bodystart="16" bodyend="16"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/SimEvent.h" line="6" column="1" bodyfile="include/SimEvent.h" bodystart="6" bodyend="17"/>
    <listofallmembers>
      <member refid="class_sim_event_1a75a3df83862f391217e76cf8b5cd4839" prot="private" virt="non-virtual"><scope>SimEvent</scope><name>callback</name></member>
      <member refid="class_sim_event_1a7e49f244ab65e1eedc879cc8ee130c3c" prot="public" virt="non-virtual"><scope>SimEvent</scope><name>emit</name></member>
      <member refid="class_sim_event_1aa2a54d95d9972da78f0be25446e08a95" prot="private" virt="non-virtual"><scope>SimEvent</scope><name>emitTick</name></member>
      <member refid="class_sim_event_1a2de8a0ed0e17d8750202636e3dcf7de6" prot="private" virt="non-virtual"><scope>SimEvent</scope><name>en</name></member>
      <member refid="class_sim_event_1a24c6ed79591db033b7e6ca11582df889" prot="public" virt="non-virtual"><scope>SimEvent</scope><name>getEmitTick</name></member>
      <member refid="class_sim_event_1a7e14a8f9726c5d4369cdc1fd4e11770c" prot="public" virt="non-virtual"><scope>SimEvent</scope><name>SimEvent</name></member>
      <member refid="class_sim_event_1a931ac60ebd300eae7ad05f2b40197ee3" prot="public" virt="non-virtual"><scope>SimEvent</scope><name>then</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
